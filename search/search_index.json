{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This website is an onboarding document with basic informations that is used for faster mastering, comprehension and navigation at the beginning of each project development. QA Skills, Selenium, Python, Seleniumbase, TestProjectIO, Coding Guidelines, Links, Tips and Tricks","title":"Home"},{"location":"#_1","text":"This website is an onboarding document with basic informations that is used for faster mastering, comprehension and navigation at the beginning of each project development. QA Skills, Selenium, Python, Seleniumbase, TestProjectIO, Coding Guidelines, Links, Tips and Tricks","title":""},{"location":"index.en/","text":"Welcome to Furman QA Docs Moto: if (sad() == true) { sad().stop(); dude_life_is_beautiful(beAwesome); } For full documentation visit mkdocs.org . Subscribe to our newsletter Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Substance Description Philosophon A unit of logic so tiny only a philosopher could hope to split it. Stalinium Alloy was used during WW2 providing Soviet forces enough toughness to bounce off enemy projectiles. Boyfriend Material Material that's getting harder and harder to find these days. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. The quick brown fox , jumped over the lazy dog .","title":"Welcome to Furman QA Docs"},{"location":"index.en/#welcome-to-furman-qa-docs","text":"Moto: if (sad() == true) { sad().stop(); dude_life_is_beautiful(beAwesome); } For full documentation visit mkdocs.org . Subscribe to our newsletter","title":"Welcome to Furman QA Docs"},{"location":"index.en/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Substance Description Philosophon A unit of logic so tiny only a philosopher could hope to split it. Stalinium Alloy was used during WW2 providing Soviet forces enough toughness to bounce off enemy projectiles. Boyfriend Material Material that's getting harder and harder to find these days.","title":"Commands"},{"location":"index.en/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. The quick brown fox , jumped over the lazy dog .","title":"Project layout"},{"location":"pages/about/","text":"Hello My name is Vladan Furman I have been professionally testing software for more than 5 years, and I am passionate about Web Developing, and QA Engineering. For the last 5 years, I've been working with different software testing technique, and on different International projects. Each of the projects was a differently organized score in every respect, starting with the duration of the projects, testing tools, different environments, operating systems, clients, as well as peoples culture. I have extensive knowledge of software testing life cycle processes in software development, and I like to share it with colleagues testers. I like to bring innovations in automation and test averages, and feel good when my knowledge brings benefits to the company that I work for. Responsibilities Creating tests scripts Organization and maintenance of scripts Continuous integration process using end-to-end tests depends on frameworks Bug reporting and documenting Sharing knowledge and actively participating in improvements Contact LinkedIn FurmanDocs","title":"About"},{"location":"pages/about/#hello","text":"","title":"Hello"},{"location":"pages/about/#my-name-is-vladan-furman","text":"I have been professionally testing software for more than 5 years, and I am passionate about Web Developing, and QA Engineering. For the last 5 years, I've been working with different software testing technique, and on different International projects. Each of the projects was a differently organized score in every respect, starting with the duration of the projects, testing tools, different environments, operating systems, clients, as well as peoples culture. I have extensive knowledge of software testing life cycle processes in software development, and I like to share it with colleagues testers. I like to bring innovations in automation and test averages, and feel good when my knowledge brings benefits to the company that I work for.","title":"My name is Vladan Furman"},{"location":"pages/about/#responsibilities","text":"Creating tests scripts Organization and maintenance of scripts Continuous integration process using end-to-end tests depends on frameworks Bug reporting and documenting Sharing knowledge and actively participating in improvements","title":"Responsibilities"},{"location":"pages/about/#contact","text":"LinkedIn FurmanDocs","title":"Contact"},{"location":"pages/code_examples/selenium/ce_selenium_java/","text":"Selenium-Java Example Initialize Maven : selenium - firefox - driver import org.openqa.selenium.firefox.FirefoxDriver ; WebDriver driver = new FirefoxDriver (); // Maven: selenium-safari-driver import org.openqa.selenium.safari.SafariDriver ; WebDriver driver = new SafariDriver (); // Maven: selenium-chrome-driver import org.openqa.selenium.chrome.ChromeDriver ; WebDriver driver = new ChromeDriver (); Locators driver . findElement ( By . className ( \"className\" )); driver . findElement ( By . cssSelector ( \"css\" )); driver . findElement ( By . id ( \"id\" )); driver . findElement ( By . linkText ( \"text\" )); driver . findElement ( By . name ( \"name\" )); driver . findElement ( By . partialLinkText ( \"pText\" )); driver . findElement ( By . tagName ( \"input\" )); driver . findElement ( By . xpath ( \"//*[@id='editor']\" )); // Find multiple elementsList < WebElement > anchors = driver . findElements ( By . tagName ( \"a\" )); // Search for an element inside anotherWebElement div = driver . findElement ( By . tagName ( \"div\" )). findElement ( By . tagName ( \"a\" )); Basic Elements Operations WebElement element = driver . findElement ( By . id ( \"id\" )); element . click (); element . sendKeys ( \"someText\" ); element . clear (); element . submit (); String innerText = element . getText (); boolean isEnabled = element . isEnabled (); boolean isDisplayed = element . isDisplayed (); boolean isSelected = element . isSelected (); WebElement element = driver . findElement ( By . id ( \"id\" )); Select select = new Select ( element ); select . selectByIndex ( 1 ); select . selectByVisibleText ( \"Ford\" ); select . selectByValue ( \"ford\" ); select . deselectAll (); select . deselectByIndex ( 1 ); select . deselectByVisibleText ( \"Ford\" ); select . deselectByValue ( \"ford\" ); List < WebElement > allSelected = select . getAllSelectedOptions (); boolean isMultipleSelect = select . isMultiple (); Advanced Element Operations // Drag and Drop WebElement element = driver . FindElement ( By . xpath ( \"//[@id='project']/p[1]/div/div[2]\" )); Actions move = new Actions ( driver ); move . dragAndDropBy ( element , 30 , 0 ). build (). perform (); // How to check if an element is visible Assert . assertTrue ( driver . findElement ( By . xpath ( \"//[@id='tve_editor']/div\" )). isDisplayed ()); // Upload a file WebElement element = driver . findElement ( By . id ( \"RadUpload1file0\" )); String filePath = \"D:WebDriver.Series.TestsWebDriver.xml\" ; element . sendKeys ( filePath ); // Scroll focus to control WebElement link = driver . findElement ( By . partialLinkText ( \"Previous post\" )); String js = String . format ( \"window.scroll(0, %d);\" , link . getLocation (). getY ()); (( JavascriptExecutor ) driver ). executeScript ( js ); link . click (); // Taking an element screenshot WebElement element = driver . findElement ( By . xpath ( \"//[@id='tve_editor']/div\" )); File screenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); BufferedImage fullImg = ImageIO . read ( screenshotFile ); Point point = element . getLocation (); int elementWidth = element . getSize (). getWidth (); int elementHeight = element . getSize (). getHeight (); BufferedImage eleScreenshot = fullImg . getSubimage ( point . getX (), point . getY (), elementWidth , elementHeight ); ImageIO . write ( eleScreenshot , \"png\" , screenshotFile ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( screenshotFile , destFile ); // Focus on a control WebElement link = driver . findElement ( By . partialLinkText ( \"Previous post\" )); Actions action = new Actions ( driver ); action . moveToElement ( link ). build (). perform (); // Wait for visibility of an element WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . xpath ( \"//[@id='tve_editor']/div[2]/div[2]/div/div\" ))); Basic Browser Operations // Navigate to a page driver . navigate (). to ( \"http://google.com\" ); // Get the title of the page String title = driver . getTitle (); // Get the current URL String url = driver . getCurrentUrl (); // Get the current page HTML source String html = driver . getPageSource (); Advanced Browser Operations // Handle JavaScript pop-ups Alert alert = driver . switchTo (). alert (); alert . accept (); alert . dismiss (); // Switch between browser windows or tabs Set < String > windowHandles = driver . getWindowHandles (); String firstTab = ( String ) windowHandles . toArray () [ 1 ] ; String lastTab = ( String ) windowHandles . toArray () [ 2 ] ; driver . switchTo (). window ( lastTab ); // Navigation history driver . navigate (). back (); driver . navigate (). refresh (); driver . navigate (). forward (); // Maximize windowdriver.manage().window().maximize(); // Add a new cookieCookie newCookie = new Cookie(\"customName\", \"customValue\"); driver . manage (). addCookie ( newCookie ); // Get all cookies Set < Cookie > cookies = driver . manage (). getCookies (); // Delete a cookie by name driver . manage (). deleteCookieNamed ( \"CookieName\" ); // Delete all cookies driver . manage (). deleteAllCookies (); //Taking a full-screen screenshot File srceenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( srceenshotFile , destFile ); // Wait until a page is fully loaded via JavaScript WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( x -> {(( String )(( JavascriptExecutor ) driver ). executeScript ( \"return document.readyState\" )). equals ( \"complete\" );}); // Switch to frames driver . switchTo (). frame ( 1 ); driver . switchTo (). frame ( \"frameName\" ); WebElement element = driver . findElement ( By . id ( \"id\" )); driver . switchTo (). frame ( element ); // Switch to the default document driver . switchTo (). defaultContent (); Advanced Browser Configurations // Set a HTTP proxy Chromevar proxy = new Proxy(); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); driver = new ChromeDriver ( chromeOptions ); // Accept all certificates ChromeChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions ); // Set Chrome options ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"user-data-dir=C:PathToUser Data\" ); driver = new ChromeDriver ( chromeOptions ); // Set the default page load timeout driver . manage (). timeouts (). pageLoadTimeout ( 10 , TimeUnit . SECONDS ); // Start Chrome with an unpacked extension ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"load-extension=/path/to/extension\" ); driver = new ChromeDriver ( chromeOptions ); // Start Chrome with a packed extension ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addExtensions ( new File ( \"local/path/to/extension.crx\" )); driver = new ChromeDriver ( chromeOptions ); Taking a Screenshot You can use the following method to take a full-screen screenshot of the browser. public void takeFullScreenshot ( String fileName ) throws Exception { File srcFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( srcFile , destFile ); } Sometimes you may need to take a screenshot of a single element. public void takeScreenshotOfElement ( WebElement element , String fileName ) throws Exception { File screenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); BufferedImage fullImg = ImageIO . read ( screenshotFile ); Point point = element . getLocation (); int elementWidth = element . getSize (). getWidth (); int elementHeight = element . getSize (). getHeight (); BufferedImage eleScreenshot = fullImg . getSubimage ( point . getX (), point . getY (), elementWidth , elementHeight ); ImageIO . write ( eleScreenshot , \"png\" , screenshotFile ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( screenshotFile , destFile ); } First, we make a full-screen screenshot then we locate the specified element by its location and size attributes. After that, the found rectangle chunk is saved as a BufferedImage. Here is how you use both methods in tests: @Test public void takeFullScreenshot_test () throws Exception { driver . navigate (). to ( \"http://automatetheplanet.com\" ); takeFullScreenshot ( \"testImage\" ); } @Test public void takeElementScreenshot_test () throws Exception { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ))); takeScreenshotOfElement ( element , \"testElementImage\" ); } Get HTML Source of WebElement You can use the getAttribute method of the WebElement interface to get the inner HTML of a specific element. @Test public void getHtmlSourceOfWebElement () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ))); String sourceHtml = element . getAttribute ( \"innerHTML\" ); System . out . println ( sourceHtml ); } Execute JavaScript You can use the interface JavaScriptExecutor to execute JavaScript through WebDriver. @Test public void executeJavaScript () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; String title = ( String ) javascriptExecutor . executeScript ( \"return document.title\" ); System . out . println ( title ); } This test will take the current window's title via JavaScript and print it to the output window. Set Page Load Timeoout There are at least three methods that you can use for the job. First, you can set the default driver's page load timeout through the WebDriver's options class. driver . manage (). timeouts (). pageLoadTimeout ( 10 , TimeUnit . SECONDS ); You can wait until the page is completely loaded via JavaScript. private void waitUntilLoaded () { wait . until ( x -> { JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; String isReady = ( String ) javascriptExecutor . executeScript ( \"return document.readyState\" ); return isReady . equals ( \"complete\" ); }); } Your third option is to wait for a specific element(s) to be visible on the page. wait . until ( ExpectedConditions . visibilityOfAllElements ( driver . findElements ( By . xpath ( \"//*[@id='tve_editor']/div[2]/div[2]/div/div\" )))); Execute Tests in a Headless Browser You can use the ChromeOptions class and set a few arguments to set up Chrome to run without its UI in the so-called headless mode. You can do the same for Firefox and Edge Chromium. ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--headless\" , \"--disable-gpu\" , \"--window-size=1920,1200\" , \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions ); Check If an Element Is Visible You can use the isDisplayed method of the WebElement interface. @Test public void checkIfElementIsVisible () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = driver . findElement ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ); Assert . assertTrue ( element ). isDisplayed ()); } Manage Cookies Before you can work with the cookies of a site, you need to navigate to some of its pages. @Test public void manageCookies () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); // get all cookies var cookies = driver . manage (). getCookies (); for ( Cookie cookie : cookies ) { System . out . println ( cookie . getName ()); } // get a cookie by name var fbPixelCookie = driver . manage (). getCookieNamed ( \"_fbp\" ); // create a new cookie by name Cookie newCookie = new Cookie ( \"customName\" , \"customValue\" ); driver . manage (). addCookie ( newCookie ); // delete a cookie driver . manage (). deleteCookie ( fbPixelCookie ); // delete a cookie by name driver . manage (). deleteCookieNamed ( \"customName\" ); // delete all cookies driver . manage (). deleteAllCookies (); } Maximize Window Use the maximize method of the Window interface. driver . manage (). window (). maximize (); Drag and Drop You can use the special Actions WebDriver class to perform complex UI interactions. Through its method dragAndDropBy, you can drag and drop. You only need to set the desired X and Y offsets. @Test public void dragAndDrop () { driver . navigate (). to ( \"http://loopj.com/jquery-simple-slider/\" ); var element = driver . findElement ( By . xpath ( \"//*[@id='project']/p[1]/div/div[2]\" )); Actions action = new Actions ( driver ); action . dragAndDropBy ( element , 30 , 0 ). build (). perform (); } Upload a File It is a straightforward task to upload a file using WebDriver. You need to locate the file element and use the WebElement's sendKeys method to set the path to your file. @Test public void fileUpload () throws IOException { driver . navigate (). to ( \"https://demos.telerik.com/aspnet-ajax/ajaxpanel/application-scenarios/file-upload/defaultcs.aspx\" ); var element = driver . findElement ( By . id ( \"ctl00_ContentPlaceholder1_RadUpload1file0\" )); String filePath = Paths . get ( getProperty ( \"java.io.tmpdir\" ), \"debugWebDriver.xml\" ). toString (); File destFile = new File ( filePath ); destFile . createNewFile (); element . sendKeys ( filePath ); } Handle JavaScript Pop-ups You can use the accept and dismiss methods of the Alert interface to handle JavaScript pop-ups. First, you need to use the switchTo method to switch to the alert. @Test public void handleJavaScripPopUps () { driver . navigate (). to ( \"http://www.w3schools.com/js/tryit.asp?filename=tryjs_confirm\" ); driver . switchTo (). frame ( \"iframeResult\" ); var button = driver . findElement ( By . xpath ( \"/html/body/button\" )); button . click (); Alert alert = driver . switchTo (). alert (); if ( alert . getText (). equals ( \"Press a button!\" )) { alert . accept (); } else { alert . dismiss (); } } Switch Between Browser Windows or Tabs WebDriver drives the browser within a scope of one browser window. However, we can use its switchTo method to change the target window or tab. @Test public void movingBetweenTabs () { driver . navigate (). to ( \"https://www.automatetheplanet.com/\" ); var firstLink = driver . findElement ( By . xpath ( \"//*[@id='menu-item-11362']/a\" )); var secondLink = driver . findElement ( By . xpath ( \"//*[@id='menu-item-6']/a\" )); String selectLinkOpenninNewTab = Keys . chord ( Keys . CONTROL , Keys . RETURN ); firstLink . sendKeys ( selectLinkOpenninNewTab ); secondLink . sendKeys ( selectLinkOpenninNewTab ); Set < String > windows = driver . getWindowHandles (); String firstTab = ( String ) windows . toArray () [ 1 ] ; String lastTab = ( String ) windows . toArray () [ 2 ] ; driver . switchTo (). window ( lastTab ); Assert . assertEquals ( \"Resources - Automate The Planet\" , driver . getTitle ()); driver . switchTo (). window ( firstTab ); Assert . assertEquals ( \"Blog - Automate The Planet\" , driver . getTitle ()); } The getWindowHandles method returns all open browser windows. You can pass the name of the desired tab/window to the window method of the TargetLocator interface (returned by the switchTo method) to change the current target. You can also notice that we use one more trick to open the link in a new tab using the Keys.chord method, and then instead of clicking, we use the sendKeys method to perform CTRL + return sequence. Navigation History WebDriver Navigation interface contains handy methods for going forward and backward. Also, you can refresh the current page. @Test public void navigationHistory () { driver . navigate (). to ( \"https://www.codeproject.com/Articles/1078541/Advanced-WebDriver-Tips-and-Tricks-Part\" ); driver . navigate (). to ( \"http://www.codeproject.com/Articles/1017816/Speed-up-Selenium-Tests-through-RAM-Facts-and-Myth\" ); driver . navigate (). back (); Assert . assertEquals ( \"10 Advanced WebDriver Tips and Tricks - Part 1 - CodeProject\" , driver . getTitle ()); driver . navigate (). refresh (); Assert . assertEquals ( \"10 Advanced WebDriver Tips and Tricks - Part 1 - CodeProject\" , driver . getTitle ()); driver . navigate (). forward (); Assert . assertEquals ( \"Speed up Selenium Tests through RAM Facts and Myths - CodeProject\" , driver . getTitle ()); } Handle SSL Certificate Error ChromeDriver ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions ); Scroll Focus to Control There isn't a built-in mechanism in WebDriver to scroll focus to a control. However, you can use the JavaScript's method window.scroll. You only need to pass the getY location of the desired element. @Test public void scrollFocusToControl () { driver . navigate (). to ( \"http://automatetheplanet.com/\" ); var ourMissionLink = driver . findElement ( By . xpath ( \"//*[@id=\" panel - 6435 - 0 - 0 - 4 \"]/div\" )); String jsToBeExecuted = String . format ( \"window.scroll(0, {0});\" , ourMissionLink . getLocation (). getY ()); JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; javascriptExecutor . executeScript ( jsToBeExecuted ); } Focus on a Control To do the trick, we use again the special Actions class, which has a method called moveToElement. @Test public void focusOnControl () { driver . navigate (). to ( \"http://automatetheplanet.com/\" ); waitUntilLoaded (); var ourMissionLink = driver . findElement ( By . xpath ( \"//*[@id=\" panel - 6435 - 0 - 0 - 4 \"]/div\" )); Actions action = new Actions ( driver ); action . moveToElement ( ourMissionLink ). build (). perform (); } Set HTTP Proxy ChromeDriver The configuration of a proxy for ChromeDriver is a little bit different from the one for FirefoxDriver. You need to use the special Proxy class in combination with ChromeOptions. var proxy = new Proxy (); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); driver = new ChromeDriver ( chromeOptions ); Set HTTP Proxy with Authentication ChromeDriver The only difference from the previous example is the configuration of the --proxy-server argument. var proxy = new Proxy (); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); chromeOptions . addArguments ( \"--proxy-server=http://user:password@127.0.0.1:3239\" ); driver = new ChromeDriver ( chromeOptions ); Start ChromeDriver with an Unpacked Extension Chrome extensions can be either packed or unpacked. Packed extensions are a single file with a .crx extension. Unpacked Extensions are a directory containing the extension, including a manifest.json file. To load an unpacked extension you need to set the load-extension argument. chromeOptions . addArguments ( \"load-extension=/pathTo/extension\" ); driver = new ChromeDriver ( chromeOptions ); Start ChromeDriver with an Packed Extension Instead of setting the load-extension argument, you need to use the addExtension method of the ChromeOptions class to set the path to your packed extension. ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addExtensions ( new File ( \"local/path/to/extension.crx\" )); driver = new ChromeDriver ( chromeOptions ); Assert a Button Enabled or Disabled You can check if an element is disabled through the isEnabled method of the WebElement interface. @Test public void assertButtonEnabledDisabled () { driver . navigate (). to ( \"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_button_disabled\" ); driver . switchTo (). frame ( \"iframeResult\" ); var button = driver . findElement ( By . xpath ( \"/html/body/button\" )); Assert . assertFalse ( button . isEnabled ()); } Verify File Downloaded ChromeDriver To change the default download directory of the current Chrome instance set the download.default_directory argument. When we initiate the file download, we use the WebDriverWait to wait until the file exists on the file system. Finally, we assert the file size. The whole code is surrounded with a try-finally block. In the finally we delete the downloaded file so that our test to be consistent every time. String downloadFilepath = \"c:temp\" ; HashMap < String , Object > chromePrefs = new HashMap <> (); chromePrefs . put ( \"profile.default_content_settings.popups\" , 0 ); chromePrefs . put ( \"download.default_directory\" , downloadFilepath ); chromeOptions . setExperimentalOption ( \"prefs\" , chromePrefs ); chromeOptions . addArguments ( \"--test-type\" ); chromeOptions . addArguments ( \"start-maximized\" , \"disable-popup-blocking\" ); String downloadFilepath = \"c:temp\" ; HashMap < String , Object > chromePrefs = new HashMap <> (); chromePrefs . put ( \"profile.default_content_settings.popups\" , 0 ); chromePrefs . put ( \"download.default_directory\" , downloadFilepath ); chromeOptions . setExperimentalOption ( \"prefs\" , chromePrefs ); chromeOptions . addArguments ( \"--test-type\" ); chromeOptions . addArguments ( \"start-maximized\" , \"disable-popup-blocking\" ); @Test public void VerifyFileDownloadChrome () throws IOException { var expectedFilePath = Paths . get ( \"c:tempTesting_Framework_2015_3_1314_2_Free.exe\" ); try { driver . navigate (). to ( \"https://www.telerik.com/download-trial-file/v2/telerik-testing-framework\" ); wait . until ( x -> Files . exists ( expectedFilePath )); long bytes = Files . size ( expectedFilePath ); Assert . assertEquals ( 4326192 , bytes ); } finally { if ( Files . exists ( expectedFilePath )) { Files . delete ( expectedFilePath ); } } }","title":"Selenium Java"},{"location":"pages/code_examples/selenium/ce_selenium_java/#selenium-java-example","text":"","title":"Selenium-Java Example"},{"location":"pages/code_examples/selenium/ce_selenium_java/#initialize","text":"Maven : selenium - firefox - driver import org.openqa.selenium.firefox.FirefoxDriver ; WebDriver driver = new FirefoxDriver (); // Maven: selenium-safari-driver import org.openqa.selenium.safari.SafariDriver ; WebDriver driver = new SafariDriver (); // Maven: selenium-chrome-driver import org.openqa.selenium.chrome.ChromeDriver ; WebDriver driver = new ChromeDriver ();","title":"Initialize"},{"location":"pages/code_examples/selenium/ce_selenium_java/#locators","text":"driver . findElement ( By . className ( \"className\" )); driver . findElement ( By . cssSelector ( \"css\" )); driver . findElement ( By . id ( \"id\" )); driver . findElement ( By . linkText ( \"text\" )); driver . findElement ( By . name ( \"name\" )); driver . findElement ( By . partialLinkText ( \"pText\" )); driver . findElement ( By . tagName ( \"input\" )); driver . findElement ( By . xpath ( \"//*[@id='editor']\" )); // Find multiple elementsList < WebElement > anchors = driver . findElements ( By . tagName ( \"a\" )); // Search for an element inside anotherWebElement div = driver . findElement ( By . tagName ( \"div\" )). findElement ( By . tagName ( \"a\" ));","title":"Locators"},{"location":"pages/code_examples/selenium/ce_selenium_java/#basic-elements-operations","text":"WebElement element = driver . findElement ( By . id ( \"id\" )); element . click (); element . sendKeys ( \"someText\" ); element . clear (); element . submit (); String innerText = element . getText (); boolean isEnabled = element . isEnabled (); boolean isDisplayed = element . isDisplayed (); boolean isSelected = element . isSelected (); WebElement element = driver . findElement ( By . id ( \"id\" )); Select select = new Select ( element ); select . selectByIndex ( 1 ); select . selectByVisibleText ( \"Ford\" ); select . selectByValue ( \"ford\" ); select . deselectAll (); select . deselectByIndex ( 1 ); select . deselectByVisibleText ( \"Ford\" ); select . deselectByValue ( \"ford\" ); List < WebElement > allSelected = select . getAllSelectedOptions (); boolean isMultipleSelect = select . isMultiple ();","title":"Basic Elements Operations"},{"location":"pages/code_examples/selenium/ce_selenium_java/#advanced-element-operations","text":"// Drag and Drop WebElement element = driver . FindElement ( By . xpath ( \"//[@id='project']/p[1]/div/div[2]\" )); Actions move = new Actions ( driver ); move . dragAndDropBy ( element , 30 , 0 ). build (). perform (); // How to check if an element is visible Assert . assertTrue ( driver . findElement ( By . xpath ( \"//[@id='tve_editor']/div\" )). isDisplayed ()); // Upload a file WebElement element = driver . findElement ( By . id ( \"RadUpload1file0\" )); String filePath = \"D:WebDriver.Series.TestsWebDriver.xml\" ; element . sendKeys ( filePath ); // Scroll focus to control WebElement link = driver . findElement ( By . partialLinkText ( \"Previous post\" )); String js = String . format ( \"window.scroll(0, %d);\" , link . getLocation (). getY ()); (( JavascriptExecutor ) driver ). executeScript ( js ); link . click (); // Taking an element screenshot WebElement element = driver . findElement ( By . xpath ( \"//[@id='tve_editor']/div\" )); File screenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); BufferedImage fullImg = ImageIO . read ( screenshotFile ); Point point = element . getLocation (); int elementWidth = element . getSize (). getWidth (); int elementHeight = element . getSize (). getHeight (); BufferedImage eleScreenshot = fullImg . getSubimage ( point . getX (), point . getY (), elementWidth , elementHeight ); ImageIO . write ( eleScreenshot , \"png\" , screenshotFile ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( screenshotFile , destFile ); // Focus on a control WebElement link = driver . findElement ( By . partialLinkText ( \"Previous post\" )); Actions action = new Actions ( driver ); action . moveToElement ( link ). build (). perform (); // Wait for visibility of an element WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( ExpectedConditions . visibilityOfAllElementsLocatedBy ( By . xpath ( \"//[@id='tve_editor']/div[2]/div[2]/div/div\" )));","title":"Advanced Element Operations"},{"location":"pages/code_examples/selenium/ce_selenium_java/#basic-browser-operations","text":"// Navigate to a page driver . navigate (). to ( \"http://google.com\" ); // Get the title of the page String title = driver . getTitle (); // Get the current URL String url = driver . getCurrentUrl (); // Get the current page HTML source String html = driver . getPageSource ();","title":"Basic Browser Operations"},{"location":"pages/code_examples/selenium/ce_selenium_java/#advanced-browser-operations","text":"// Handle JavaScript pop-ups Alert alert = driver . switchTo (). alert (); alert . accept (); alert . dismiss (); // Switch between browser windows or tabs Set < String > windowHandles = driver . getWindowHandles (); String firstTab = ( String ) windowHandles . toArray () [ 1 ] ; String lastTab = ( String ) windowHandles . toArray () [ 2 ] ; driver . switchTo (). window ( lastTab ); // Navigation history driver . navigate (). back (); driver . navigate (). refresh (); driver . navigate (). forward (); // Maximize windowdriver.manage().window().maximize(); // Add a new cookieCookie newCookie = new Cookie(\"customName\", \"customValue\"); driver . manage (). addCookie ( newCookie ); // Get all cookies Set < Cookie > cookies = driver . manage (). getCookies (); // Delete a cookie by name driver . manage (). deleteCookieNamed ( \"CookieName\" ); // Delete all cookies driver . manage (). deleteAllCookies (); //Taking a full-screen screenshot File srceenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( srceenshotFile , destFile ); // Wait until a page is fully loaded via JavaScript WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( x -> {(( String )(( JavascriptExecutor ) driver ). executeScript ( \"return document.readyState\" )). equals ( \"complete\" );}); // Switch to frames driver . switchTo (). frame ( 1 ); driver . switchTo (). frame ( \"frameName\" ); WebElement element = driver . findElement ( By . id ( \"id\" )); driver . switchTo (). frame ( element ); // Switch to the default document driver . switchTo (). defaultContent ();","title":"Advanced Browser Operations"},{"location":"pages/code_examples/selenium/ce_selenium_java/#advanced-browser-configurations","text":"// Set a HTTP proxy Chromevar proxy = new Proxy(); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); driver = new ChromeDriver ( chromeOptions ); // Accept all certificates ChromeChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions ); // Set Chrome options ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"user-data-dir=C:PathToUser Data\" ); driver = new ChromeDriver ( chromeOptions ); // Set the default page load timeout driver . manage (). timeouts (). pageLoadTimeout ( 10 , TimeUnit . SECONDS ); // Start Chrome with an unpacked extension ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"load-extension=/path/to/extension\" ); driver = new ChromeDriver ( chromeOptions ); // Start Chrome with a packed extension ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addExtensions ( new File ( \"local/path/to/extension.crx\" )); driver = new ChromeDriver ( chromeOptions );","title":"Advanced Browser Configurations"},{"location":"pages/code_examples/selenium/ce_selenium_java/#taking-a-screenshot","text":"You can use the following method to take a full-screen screenshot of the browser. public void takeFullScreenshot ( String fileName ) throws Exception { File srcFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( srcFile , destFile ); } Sometimes you may need to take a screenshot of a single element. public void takeScreenshotOfElement ( WebElement element , String fileName ) throws Exception { File screenshotFile = (( TakesScreenshot ) driver ). getScreenshotAs ( OutputType . FILE ); BufferedImage fullImg = ImageIO . read ( screenshotFile ); Point point = element . getLocation (); int elementWidth = element . getSize (). getWidth (); int elementHeight = element . getSize (). getHeight (); BufferedImage eleScreenshot = fullImg . getSubimage ( point . getX (), point . getY (), elementWidth , elementHeight ); ImageIO . write ( eleScreenshot , \"png\" , screenshotFile ); String tempDir = getProperty ( \"java.io.tmpdir\" ); File destFile = new File ( Paths . get ( tempDir , fileName + \".png\" ). toString ()); FileUtils . getFileUtils (). copyFile ( screenshotFile , destFile ); } First, we make a full-screen screenshot then we locate the specified element by its location and size attributes. After that, the found rectangle chunk is saved as a BufferedImage. Here is how you use both methods in tests: @Test public void takeFullScreenshot_test () throws Exception { driver . navigate (). to ( \"http://automatetheplanet.com\" ); takeFullScreenshot ( \"testImage\" ); } @Test public void takeElementScreenshot_test () throws Exception { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ))); takeScreenshotOfElement ( element , \"testElementImage\" ); }","title":"Taking a Screenshot"},{"location":"pages/code_examples/selenium/ce_selenium_java/#get-html-source-of-webelement","text":"You can use the getAttribute method of the WebElement interface to get the inner HTML of a specific element. @Test public void getHtmlSourceOfWebElement () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ))); String sourceHtml = element . getAttribute ( \"innerHTML\" ); System . out . println ( sourceHtml ); }","title":"Get HTML Source of WebElement"},{"location":"pages/code_examples/selenium/ce_selenium_java/#execute-javascript","text":"You can use the interface JavaScriptExecutor to execute JavaScript through WebDriver. @Test public void executeJavaScript () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; String title = ( String ) javascriptExecutor . executeScript ( \"return document.title\" ); System . out . println ( title ); } This test will take the current window's title via JavaScript and print it to the output window.","title":"Execute JavaScript"},{"location":"pages/code_examples/selenium/ce_selenium_java/#set-page-load-timeoout","text":"There are at least three methods that you can use for the job. First, you can set the default driver's page load timeout through the WebDriver's options class. driver . manage (). timeouts (). pageLoadTimeout ( 10 , TimeUnit . SECONDS ); You can wait until the page is completely loaded via JavaScript. private void waitUntilLoaded () { wait . until ( x -> { JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; String isReady = ( String ) javascriptExecutor . executeScript ( \"return document.readyState\" ); return isReady . equals ( \"complete\" ); }); } Your third option is to wait for a specific element(s) to be visible on the page. wait . until ( ExpectedConditions . visibilityOfAllElements ( driver . findElements ( By . xpath ( \"//*[@id='tve_editor']/div[2]/div[2]/div/div\" ))));","title":"Set Page Load Timeoout"},{"location":"pages/code_examples/selenium/ce_selenium_java/#execute-tests-in-a-headless-browser","text":"You can use the ChromeOptions class and set a few arguments to set up Chrome to run without its UI in the so-called headless mode. You can do the same for Firefox and Edge Chromium. ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--headless\" , \"--disable-gpu\" , \"--window-size=1920,1200\" , \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions );","title":"Execute Tests in a Headless Browser"},{"location":"pages/code_examples/selenium/ce_selenium_java/#check-if-an-element-is-visible","text":"You can use the isDisplayed method of the WebElement interface. @Test public void checkIfElementIsVisible () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); var element = driver . findElement ( By . xpath ( \"/html/body/div[1]/header/div/div[2]/div/div[2]/nav\" ); Assert . assertTrue ( element ). isDisplayed ()); }","title":"Check If an Element Is Visible"},{"location":"pages/code_examples/selenium/ce_selenium_java/#manage-cookies","text":"Before you can work with the cookies of a site, you need to navigate to some of its pages. @Test public void manageCookies () { driver . navigate (). to ( \"http://automatetheplanet.com\" ); // get all cookies var cookies = driver . manage (). getCookies (); for ( Cookie cookie : cookies ) { System . out . println ( cookie . getName ()); } // get a cookie by name var fbPixelCookie = driver . manage (). getCookieNamed ( \"_fbp\" ); // create a new cookie by name Cookie newCookie = new Cookie ( \"customName\" , \"customValue\" ); driver . manage (). addCookie ( newCookie ); // delete a cookie driver . manage (). deleteCookie ( fbPixelCookie ); // delete a cookie by name driver . manage (). deleteCookieNamed ( \"customName\" ); // delete all cookies driver . manage (). deleteAllCookies (); }","title":"Manage Cookies"},{"location":"pages/code_examples/selenium/ce_selenium_java/#maximize-window","text":"Use the maximize method of the Window interface. driver . manage (). window (). maximize ();","title":"Maximize Window"},{"location":"pages/code_examples/selenium/ce_selenium_java/#drag-and-drop","text":"You can use the special Actions WebDriver class to perform complex UI interactions. Through its method dragAndDropBy, you can drag and drop. You only need to set the desired X and Y offsets. @Test public void dragAndDrop () { driver . navigate (). to ( \"http://loopj.com/jquery-simple-slider/\" ); var element = driver . findElement ( By . xpath ( \"//*[@id='project']/p[1]/div/div[2]\" )); Actions action = new Actions ( driver ); action . dragAndDropBy ( element , 30 , 0 ). build (). perform (); }","title":"Drag and Drop"},{"location":"pages/code_examples/selenium/ce_selenium_java/#upload-a-file","text":"It is a straightforward task to upload a file using WebDriver. You need to locate the file element and use the WebElement's sendKeys method to set the path to your file. @Test public void fileUpload () throws IOException { driver . navigate (). to ( \"https://demos.telerik.com/aspnet-ajax/ajaxpanel/application-scenarios/file-upload/defaultcs.aspx\" ); var element = driver . findElement ( By . id ( \"ctl00_ContentPlaceholder1_RadUpload1file0\" )); String filePath = Paths . get ( getProperty ( \"java.io.tmpdir\" ), \"debugWebDriver.xml\" ). toString (); File destFile = new File ( filePath ); destFile . createNewFile (); element . sendKeys ( filePath ); }","title":"Upload a File"},{"location":"pages/code_examples/selenium/ce_selenium_java/#handle-javascript-pop-ups","text":"You can use the accept and dismiss methods of the Alert interface to handle JavaScript pop-ups. First, you need to use the switchTo method to switch to the alert. @Test public void handleJavaScripPopUps () { driver . navigate (). to ( \"http://www.w3schools.com/js/tryit.asp?filename=tryjs_confirm\" ); driver . switchTo (). frame ( \"iframeResult\" ); var button = driver . findElement ( By . xpath ( \"/html/body/button\" )); button . click (); Alert alert = driver . switchTo (). alert (); if ( alert . getText (). equals ( \"Press a button!\" )) { alert . accept (); } else { alert . dismiss (); } }","title":"Handle JavaScript Pop-ups"},{"location":"pages/code_examples/selenium/ce_selenium_java/#switch-between-browser-windows-or-tabs","text":"WebDriver drives the browser within a scope of one browser window. However, we can use its switchTo method to change the target window or tab. @Test public void movingBetweenTabs () { driver . navigate (). to ( \"https://www.automatetheplanet.com/\" ); var firstLink = driver . findElement ( By . xpath ( \"//*[@id='menu-item-11362']/a\" )); var secondLink = driver . findElement ( By . xpath ( \"//*[@id='menu-item-6']/a\" )); String selectLinkOpenninNewTab = Keys . chord ( Keys . CONTROL , Keys . RETURN ); firstLink . sendKeys ( selectLinkOpenninNewTab ); secondLink . sendKeys ( selectLinkOpenninNewTab ); Set < String > windows = driver . getWindowHandles (); String firstTab = ( String ) windows . toArray () [ 1 ] ; String lastTab = ( String ) windows . toArray () [ 2 ] ; driver . switchTo (). window ( lastTab ); Assert . assertEquals ( \"Resources - Automate The Planet\" , driver . getTitle ()); driver . switchTo (). window ( firstTab ); Assert . assertEquals ( \"Blog - Automate The Planet\" , driver . getTitle ()); } The getWindowHandles method returns all open browser windows. You can pass the name of the desired tab/window to the window method of the TargetLocator interface (returned by the switchTo method) to change the current target. You can also notice that we use one more trick to open the link in a new tab using the Keys.chord method, and then instead of clicking, we use the sendKeys method to perform CTRL + return sequence.","title":"Switch Between Browser Windows or Tabs"},{"location":"pages/code_examples/selenium/ce_selenium_java/#navigation-history","text":"WebDriver Navigation interface contains handy methods for going forward and backward. Also, you can refresh the current page. @Test public void navigationHistory () { driver . navigate (). to ( \"https://www.codeproject.com/Articles/1078541/Advanced-WebDriver-Tips-and-Tricks-Part\" ); driver . navigate (). to ( \"http://www.codeproject.com/Articles/1017816/Speed-up-Selenium-Tests-through-RAM-Facts-and-Myth\" ); driver . navigate (). back (); Assert . assertEquals ( \"10 Advanced WebDriver Tips and Tricks - Part 1 - CodeProject\" , driver . getTitle ()); driver . navigate (). refresh (); Assert . assertEquals ( \"10 Advanced WebDriver Tips and Tricks - Part 1 - CodeProject\" , driver . getTitle ()); driver . navigate (). forward (); Assert . assertEquals ( \"Speed up Selenium Tests through RAM Facts and Myths - CodeProject\" , driver . getTitle ()); }","title":"Navigation History"},{"location":"pages/code_examples/selenium/ce_selenium_java/#handle-ssl-certificate-error-chromedriver","text":"ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addArguments ( \"--ignore-certificate-errors\" ); driver = new ChromeDriver ( chromeOptions );","title":"Handle SSL Certificate Error ChromeDriver"},{"location":"pages/code_examples/selenium/ce_selenium_java/#scroll-focus-to-control","text":"There isn't a built-in mechanism in WebDriver to scroll focus to a control. However, you can use the JavaScript's method window.scroll. You only need to pass the getY location of the desired element. @Test public void scrollFocusToControl () { driver . navigate (). to ( \"http://automatetheplanet.com/\" ); var ourMissionLink = driver . findElement ( By . xpath ( \"//*[@id=\" panel - 6435 - 0 - 0 - 4 \"]/div\" )); String jsToBeExecuted = String . format ( \"window.scroll(0, {0});\" , ourMissionLink . getLocation (). getY ()); JavascriptExecutor javascriptExecutor = ( JavascriptExecutor ) driver ; javascriptExecutor . executeScript ( jsToBeExecuted ); }","title":"Scroll Focus to Control"},{"location":"pages/code_examples/selenium/ce_selenium_java/#focus-on-a-control","text":"To do the trick, we use again the special Actions class, which has a method called moveToElement. @Test public void focusOnControl () { driver . navigate (). to ( \"http://automatetheplanet.com/\" ); waitUntilLoaded (); var ourMissionLink = driver . findElement ( By . xpath ( \"//*[@id=\" panel - 6435 - 0 - 0 - 4 \"]/div\" )); Actions action = new Actions ( driver ); action . moveToElement ( ourMissionLink ). build (). perform (); }","title":"Focus on a Control"},{"location":"pages/code_examples/selenium/ce_selenium_java/#set-http-proxy-chromedriver","text":"The configuration of a proxy for ChromeDriver is a little bit different from the one for FirefoxDriver. You need to use the special Proxy class in combination with ChromeOptions. var proxy = new Proxy (); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); driver = new ChromeDriver ( chromeOptions );","title":"Set HTTP Proxy ChromeDriver"},{"location":"pages/code_examples/selenium/ce_selenium_java/#set-http-proxy-with-authentication-chromedriver","text":"The only difference from the previous example is the configuration of the --proxy-server argument. var proxy = new Proxy (); proxy . setProxyType ( Proxy . ProxyType . MANUAL ); proxy . setAutodetect ( false ); proxy . setSslProxy ( \"127.0.0.1:3239\" ); ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . setProxy ( proxy ); chromeOptions . addArguments ( \"--proxy-server=http://user:password@127.0.0.1:3239\" ); driver = new ChromeDriver ( chromeOptions );","title":"Set HTTP Proxy with Authentication ChromeDriver"},{"location":"pages/code_examples/selenium/ce_selenium_java/#start-chromedriver-with-an-unpacked-extension","text":"Chrome extensions can be either packed or unpacked. Packed extensions are a single file with a .crx extension. Unpacked Extensions are a directory containing the extension, including a manifest.json file. To load an unpacked extension you need to set the load-extension argument. chromeOptions . addArguments ( \"load-extension=/pathTo/extension\" ); driver = new ChromeDriver ( chromeOptions );","title":"Start ChromeDriver with an Unpacked Extension"},{"location":"pages/code_examples/selenium/ce_selenium_java/#start-chromedriver-with-an-packed-extension","text":"Instead of setting the load-extension argument, you need to use the addExtension method of the ChromeOptions class to set the path to your packed extension. ChromeOptions chromeOptions = new ChromeOptions (); chromeOptions . addExtensions ( new File ( \"local/path/to/extension.crx\" )); driver = new ChromeDriver ( chromeOptions );","title":"Start ChromeDriver with an Packed Extension"},{"location":"pages/code_examples/selenium/ce_selenium_java/#assert-a-button-enabled-or-disabled","text":"You can check if an element is disabled through the isEnabled method of the WebElement interface. @Test public void assertButtonEnabledDisabled () { driver . navigate (). to ( \"http://www.w3schools.com/tags/tryit.asp?filename=tryhtml_button_disabled\" ); driver . switchTo (). frame ( \"iframeResult\" ); var button = driver . findElement ( By . xpath ( \"/html/body/button\" )); Assert . assertFalse ( button . isEnabled ()); }","title":"Assert a Button Enabled or Disabled"},{"location":"pages/code_examples/selenium/ce_selenium_java/#verify-file-downloaded-chromedriver","text":"To change the default download directory of the current Chrome instance set the download.default_directory argument. When we initiate the file download, we use the WebDriverWait to wait until the file exists on the file system. Finally, we assert the file size. The whole code is surrounded with a try-finally block. In the finally we delete the downloaded file so that our test to be consistent every time. String downloadFilepath = \"c:temp\" ; HashMap < String , Object > chromePrefs = new HashMap <> (); chromePrefs . put ( \"profile.default_content_settings.popups\" , 0 ); chromePrefs . put ( \"download.default_directory\" , downloadFilepath ); chromeOptions . setExperimentalOption ( \"prefs\" , chromePrefs ); chromeOptions . addArguments ( \"--test-type\" ); chromeOptions . addArguments ( \"start-maximized\" , \"disable-popup-blocking\" ); String downloadFilepath = \"c:temp\" ; HashMap < String , Object > chromePrefs = new HashMap <> (); chromePrefs . put ( \"profile.default_content_settings.popups\" , 0 ); chromePrefs . put ( \"download.default_directory\" , downloadFilepath ); chromeOptions . setExperimentalOption ( \"prefs\" , chromePrefs ); chromeOptions . addArguments ( \"--test-type\" ); chromeOptions . addArguments ( \"start-maximized\" , \"disable-popup-blocking\" ); @Test public void VerifyFileDownloadChrome () throws IOException { var expectedFilePath = Paths . get ( \"c:tempTesting_Framework_2015_3_1314_2_Free.exe\" ); try { driver . navigate (). to ( \"https://www.telerik.com/download-trial-file/v2/telerik-testing-framework\" ); wait . until ( x -> Files . exists ( expectedFilePath )); long bytes = Files . size ( expectedFilePath ); Assert . assertEquals ( 4326192 , bytes ); } finally { if ( Files . exists ( expectedFilePath )) { Files . delete ( expectedFilePath ); } } }","title":"Verify File Downloaded ChromeDriver"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/","text":"Seleniumbase-Python Examples HomePage (Page Object Model) Create POM \"page_objects\" folder Within POM \"page_objects\" folder create \"home_page.py\" file which contains element locators, login actions, and open_page url Step 1. Import setup from SeleniumBase (BaseCase class inherits from the unittest.TestCase class) from seleniumbase import BaseCase Step 2. Create class HomePage(BaseCase) class HomePage ( BaseCase ): Step 3. Find web elements and store it in attribute value. # home page elements logo_icon = \".custom-logo-link\" get_started_btn = \"#get-started\" heading_text = \"h1\" copyright_text = \".tg-site-footer-section-1\" menu_links = \"//*[starts-with(@id, 'menu-item')]\" username = \"#username\" password = \"#password\" login_button = \"button[name=login]\" logout_button = \".woocommerce-MyAccount-content a[href*=logout]\" title = \"Practice E-Commerce Site \u2013 Automation Bro\" Step 4. Create page object that we can use later in out HomeTest(HomePage) and call it \"login\" def login ( self ): Step 5. Within login create this actions for: Open homepage url ( self.open() ) Type text in username filed ( self.add_text () ) Type text in password filed Click on login button ( self.click() ) Assert text for Log out button ( self.assert_text() ) # actions for successful login and assertion self . open ( \"https://practice.automationbro.com/my-account\" ) self . add_text ( self . username , \"testuser00\" ) self . add_text ( self . password , \"zcbAKa4j7LpXiC6\" ) self . click ( self . login_button ) self . assert_text ( \"Log out\" , \".woocommerce-MyAccount-content\" ) Step 6. Create one more page object (function, method...) and name it \"open_page\" # action: open page self . open ( \"https://practice.automationbro.com\" ) HomeTest (Test) Create \"tests\" folder Within \"tests\" folder create \"test_home.py\" file which represents our tests for home page test. It contains \"setUp\", \"tearDown\", \"test_home_page\", and additional \"test_menu_links\" test. Step 1. Import HomePage from POM \"home_page\" from page_objects.home_page import HomePage Step 2. Create \"class HomeTest(HomePage):\" class HomeTest ( HomePage ): Step 3. Create \"setUp\", and \"tearDown\". This test will start before and after each test (etc. login, logout). def setUp ( self ): # call the parent BaseCase class setup method super () . setUp () print ( \"RUNNING BEFORE EACH TEST\" ) # login self . login () # open home page self . open_page () def tearDown ( self ): print ( \"RUNNING AFTER EACH TEST\" ) # logout self . open ( \"https://practice.automationbro.com/my-account\" ) self . click ( HomePage . logout_button ) self . assert_element_visible ( HomePage . login_button ) super () . tearDown () Step 4. Create test_home_page test. This is actual our test for home page def test_home_page ( self ): Step 5. Create actions for our test (included in requirements or acceptance criteria): Assert page title ( self.assert_title() ) Assert logo ( self.assert_element() ) click on the get started button and assert the url ( self.click ), ( self.assert_equal() ), ( self.assert_true() ) Get the text of the header and assert the value ( self.assert_text() ) Scroll to bottom and assert the copyright text ( self.scroll_to_bottom() ) # assert page title self . assert_title ( HomePage . title ) # assert logo self . assert_element ( HomePage . logo_icon ) # click on the get started button and assert the url self . click ( HomePage . get_started_btn ) get_started_url = self . get_current_url () self . assert_equal ( get_started_url , \"https://practice.automationbro.com/#get-started\" ) self . assert_true ( \"get-started\" in get_started_url ) # get the text of the header and assert the value self . assert_text ( \"Think different. Make different.\" , HomePage . heading_text ) # excercise: scroll to bottom and assert the copyright text self . scroll_to_bottom () # print(self.get_text(\"tg-site-footer-section-1\")) self . assert_text ( \"Copyright \u00a9 2020 Automation Bro\" , HomePage . copyright_text ) Step 6. Create second test \"test_menu_links\" def test_menu_links ( self ): Step 7. Create actions for our second test expected_links = [ 'About' , 'Shop' , 'Blog' , 'Contact' , 'My account' , 'Home' , 'About' , 'Blog' , 'Contact' , 'Support Form' ] # find menu links elements menu_links_el = self . find_elements ( HomePage . menu_links ) # loop through menu links for idx , link_el in enumerate ( menu_links_el ): print ( idx , link_el . text ) Run test with commands Type the following command in terminal pytest - k \"HomeTest\" pytest - k \"HomeTest\" -- dashboard pytest - k \"HomeTest\" -- dashboard -- rs -- headless pytest - k \"HomeTest\" -- html = report . html pytest - k \"HomeTest\" -- firefox pytest - k \"HomeTest\" -- safari pytest - n = 4 / number of chrome , safari , firefox instance pytest - k \"HomeTest\" -- headless Pytest options for SeleniumBase SeleniumBase's pytest plugin lets you customize test runs from the CLI (Command-Line Interface), which adds options for setting/enabling the browser type, Dashboard Mode, Demo Mode, Headless Mode, Mobile Mode, Multi-threading Mode, Recorder Mode, reuse-session mode, proxy config, user agent config, browser extensions, html-report mode, and more. Link AutomationBro SeleniumBase","title":"SeleniumBase Python"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#seleniumbase-python-examples","text":"","title":"Seleniumbase-Python Examples"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#homepage-page-object-model","text":"Create POM \"page_objects\" folder Within POM \"page_objects\" folder create \"home_page.py\" file which contains element locators, login actions, and open_page url Step 1. Import setup from SeleniumBase (BaseCase class inherits from the unittest.TestCase class) from seleniumbase import BaseCase Step 2. Create class HomePage(BaseCase) class HomePage ( BaseCase ): Step 3. Find web elements and store it in attribute value. # home page elements logo_icon = \".custom-logo-link\" get_started_btn = \"#get-started\" heading_text = \"h1\" copyright_text = \".tg-site-footer-section-1\" menu_links = \"//*[starts-with(@id, 'menu-item')]\" username = \"#username\" password = \"#password\" login_button = \"button[name=login]\" logout_button = \".woocommerce-MyAccount-content a[href*=logout]\" title = \"Practice E-Commerce Site \u2013 Automation Bro\" Step 4. Create page object that we can use later in out HomeTest(HomePage) and call it \"login\" def login ( self ): Step 5. Within login create this actions for: Open homepage url ( self.open() ) Type text in username filed ( self.add_text () ) Type text in password filed Click on login button ( self.click() ) Assert text for Log out button ( self.assert_text() ) # actions for successful login and assertion self . open ( \"https://practice.automationbro.com/my-account\" ) self . add_text ( self . username , \"testuser00\" ) self . add_text ( self . password , \"zcbAKa4j7LpXiC6\" ) self . click ( self . login_button ) self . assert_text ( \"Log out\" , \".woocommerce-MyAccount-content\" ) Step 6. Create one more page object (function, method...) and name it \"open_page\" # action: open page self . open ( \"https://practice.automationbro.com\" )","title":"HomePage (Page Object Model)"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#hometest-test","text":"Create \"tests\" folder Within \"tests\" folder create \"test_home.py\" file which represents our tests for home page test. It contains \"setUp\", \"tearDown\", \"test_home_page\", and additional \"test_menu_links\" test. Step 1. Import HomePage from POM \"home_page\" from page_objects.home_page import HomePage Step 2. Create \"class HomeTest(HomePage):\" class HomeTest ( HomePage ): Step 3. Create \"setUp\", and \"tearDown\". This test will start before and after each test (etc. login, logout). def setUp ( self ): # call the parent BaseCase class setup method super () . setUp () print ( \"RUNNING BEFORE EACH TEST\" ) # login self . login () # open home page self . open_page () def tearDown ( self ): print ( \"RUNNING AFTER EACH TEST\" ) # logout self . open ( \"https://practice.automationbro.com/my-account\" ) self . click ( HomePage . logout_button ) self . assert_element_visible ( HomePage . login_button ) super () . tearDown () Step 4. Create test_home_page test. This is actual our test for home page def test_home_page ( self ): Step 5. Create actions for our test (included in requirements or acceptance criteria): Assert page title ( self.assert_title() ) Assert logo ( self.assert_element() ) click on the get started button and assert the url ( self.click ), ( self.assert_equal() ), ( self.assert_true() ) Get the text of the header and assert the value ( self.assert_text() ) Scroll to bottom and assert the copyright text ( self.scroll_to_bottom() ) # assert page title self . assert_title ( HomePage . title ) # assert logo self . assert_element ( HomePage . logo_icon ) # click on the get started button and assert the url self . click ( HomePage . get_started_btn ) get_started_url = self . get_current_url () self . assert_equal ( get_started_url , \"https://practice.automationbro.com/#get-started\" ) self . assert_true ( \"get-started\" in get_started_url ) # get the text of the header and assert the value self . assert_text ( \"Think different. Make different.\" , HomePage . heading_text ) # excercise: scroll to bottom and assert the copyright text self . scroll_to_bottom () # print(self.get_text(\"tg-site-footer-section-1\")) self . assert_text ( \"Copyright \u00a9 2020 Automation Bro\" , HomePage . copyright_text ) Step 6. Create second test \"test_menu_links\" def test_menu_links ( self ): Step 7. Create actions for our second test expected_links = [ 'About' , 'Shop' , 'Blog' , 'Contact' , 'My account' , 'Home' , 'About' , 'Blog' , 'Contact' , 'Support Form' ] # find menu links elements menu_links_el = self . find_elements ( HomePage . menu_links ) # loop through menu links for idx , link_el in enumerate ( menu_links_el ): print ( idx , link_el . text )","title":"HomeTest (Test)"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#run-test-with-commands","text":"Type the following command in terminal pytest - k \"HomeTest\" pytest - k \"HomeTest\" -- dashboard pytest - k \"HomeTest\" -- dashboard -- rs -- headless pytest - k \"HomeTest\" -- html = report . html pytest - k \"HomeTest\" -- firefox pytest - k \"HomeTest\" -- safari pytest - n = 4 / number of chrome , safari , firefox instance pytest - k \"HomeTest\" -- headless","title":"Run test with commands"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#pytest-options-for-seleniumbase","text":"SeleniumBase's pytest plugin lets you customize test runs from the CLI (Command-Line Interface), which adds options for setting/enabling the browser type, Dashboard Mode, Demo Mode, Headless Mode, Mobile Mode, Multi-threading Mode, Recorder Mode, reuse-session mode, proxy config, user agent config, browser extensions, html-report mode, and more.","title":"Pytest options for SeleniumBase"},{"location":"pages/code_examples/selenium/ce_seleniumbase_python/#link","text":"AutomationBro SeleniumBase","title":"Link"},{"location":"pages/framework_setup/fs_cypress/","text":"Cypress QA Automaton Framework Setup This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main Task Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Cypress Limitations Safari browsers Two browsers at the same time Multi Tabs Iframes Mobile testing Java support (JavaScript only) Pre-Requisites Install GIT (Version Control System) Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment) 01. Setup JDK Install JDK 11 for Windows Setup environment variables for Java JDK within your PC Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to Environment Variables: System Properties\\Advanced\\Environment Variables Name: JAVA_HOME Destination C:\\Program Files\\Java\\jdk-11.0.12 02. Create Working Directory Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir CypressProject (This is your Working directory) Initialize Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type npm init and follow instructions 03. Install Cypress From Scratch Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type npm install cypress --save-dev (Latest version), or Type npm install cypress@6.8.0 --save-dev , or Type npm install cypress@6.9.1 --save-dev , or Type npm install cypress@7.7.0 --save-dev Start Cypress Test Runner Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type node_modules\\.bin\\cypress open (Run in background) Type node_modules\\.bin\\cypress open \u2014headed (Run in UI) 04. Clone Cypress Project Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Clone application under test git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies within node_modules folder) npm start Open Chrome browser and navigate to http://localhost:4200 Clone application outside test git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start 05. Brief Details About The Files And Folders project_name/cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases login.spec.js ) import { onNavigations } from \"../../../support/page_objects/navigations\"; import { onHelpFunc } from \"../../../support/page_objects/helpers\"; describe(`login_test`, () => { beforeEach('open application', () => { cy.openStageUrl() }); it(`valid_login_test`, function () { onHelpFunc.selectLanguageENG() cy.intercept('POST', '**/login').as('postLogin') onNavigations.navigateToLogin() cy.get('input[name=email]').clear().type(this.users.user_email, { delay: 50 }) cy.get('input[name=password]').type(this.users.user_password, { delay: 50 }) cy.get('button[type=submit]').should('contain.text', 'LOGIN').click() cy.wait('@postLogin').its('response.statusCode') .should('eq', 200) onNavigations.navigateToProfileMenu() onNavigations.navigateToLogout() }) }); plugins (This folder contains the plugins or listeners) cypress\\plugin\\index.js reports (This folder contains html reports runnable within your browser) mocha mochareports (This folder contain report.html file) support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) deleteAllPhotos() { cy.get('nav').next().find('div').find('img').then(listing => { const photoCounter = Cypress.$(listing).length expect(listing).to.have.length(photoCounter) for (let i = 0; i < photoCounter; i++) { cy.intercept('DELETE', '**/photo/*').as('deletePhoto') cy.get('nav').next().find('span').should('contain.text', 'Waiting for Approval').first() .next().find('span').last().as('deletebutton') cy.get('@deletebutton').should('contain.text', 'Delete').click({ force: true }).wait(2000).then(el => { cy.get('#modal-root').find('button').first().should('contain.text', 'Delete').click().wait(2000) }) cy.wait('@deletePhoto').its('response.statusCode').should('eq', 200) cy.waitUntil(() => cy.get('[role=\"alert\"]').click()) } }) } navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) navigateToPhotosTab() { cy.intercept('GET', '**/photo*').as('getPhoto') cy.get('nav').find('a[href=\"/profile/photos/public\"]').click() cy.wait('@getPhoto').its('response.statusCode') .should('be.oneOf', [200]) } login_page.js (Functions or actions. E.g. login different users) loginWithEmailAndPassword(email, password) { cy.intercept('POST', '**/login').as('postLogin') // Intercept POST cy.contains('#root', 'WELCOME BACK').find('form').then(form => { cy.wrap(form).find('[type=\"email\"]').type(email) cy.wrap(form).find('[type=\"password\"]').type(password) // cy.wrap(form).find('[type=\"checkbox\"]').check({ force: true }) cy.wrap(form).submit() }) cy.wait('@postLogin').its('response.statusCode') .should('be.oneOf', [200]) // Verify Status code } commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openstageUrl', () => { cy.visit(Cypress.env('stageUrl')) cy.fixture('users').then(function (users) { this.users = users }) cy.waitUntil(() => cy.title().should('include', 'Site Name')) }) index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) videos (This folder contains videos that will be saved after test execution) node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) devUrl: https//develop.xxxxx.date stageUrl: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000` \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" e2e-run-tests.js (This file contains run commands) cypress.run() spec: \"test.spec.js\" package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \"scripts\": { \u201ccypress:open\u201d: \u201cnode_modules\\\\.bin\\\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d } devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json 06. Additional Details Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations. 07. Basic Actions Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html 08. Useful Links Cypress Documentation UDEMY - Artem Bondar - Cypress: Web Automation Testing from Zero to Hero Cypress.io Cypress (Web Testing Framework) Crash Course - 2021 AutomationStepbyStep - Cypress Beginner Tutorial Tips & Tricks for Cypress","title":"Cypress (Javascript)"},{"location":"pages/framework_setup/fs_cypress/#cypress","text":"","title":"Cypress"},{"location":"pages/framework_setup/fs_cypress/#qa-automaton-framework-setup","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works.","title":"QA Automaton Framework Setup"},{"location":"pages/framework_setup/fs_cypress/#main-task","text":"Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes.","title":"Main Task"},{"location":"pages/framework_setup/fs_cypress/#cypress-limitations","text":"Safari browsers Two browsers at the same time Multi Tabs Iframes Mobile testing Java support (JavaScript only)","title":"Cypress Limitations"},{"location":"pages/framework_setup/fs_cypress/#pre-requisites","text":"Install GIT (Version Control System) Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment)","title":"Pre-Requisites"},{"location":"pages/framework_setup/fs_cypress/#01-setup-jdk","text":"Install JDK 11 for Windows Setup environment variables for Java JDK within your PC Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to Environment Variables: System Properties\\Advanced\\Environment Variables Name: JAVA_HOME Destination C:\\Program Files\\Java\\jdk-11.0.12","title":"01. Setup JDK"},{"location":"pages/framework_setup/fs_cypress/#02-create-working-directory","text":"Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir CypressProject (This is your Working directory)","title":"02. Create Working Directory"},{"location":"pages/framework_setup/fs_cypress/#initialize","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type npm init and follow instructions","title":"Initialize"},{"location":"pages/framework_setup/fs_cypress/#03-install-cypress-from-scratch","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type npm install cypress --save-dev (Latest version), or Type npm install cypress@6.8.0 --save-dev , or Type npm install cypress@6.9.1 --save-dev , or Type npm install cypress@7.7.0 --save-dev","title":"03. Install Cypress From Scratch"},{"location":"pages/framework_setup/fs_cypress/#start-cypress-test-runner","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Type node_modules\\.bin\\cypress open (Run in background) Type node_modules\\.bin\\cypress open \u2014headed (Run in UI)","title":"Start Cypress Test Runner"},{"location":"pages/framework_setup/fs_cypress/#04-clone-cypress-project","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/CypressProject folder Clone application under test git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies within node_modules folder) npm start Open Chrome browser and navigate to http://localhost:4200 Clone application outside test git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start","title":"04. Clone Cypress Project"},{"location":"pages/framework_setup/fs_cypress/#05-brief-details-about-the-files-and-folders","text":"project_name/cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases login.spec.js ) import { onNavigations } from \"../../../support/page_objects/navigations\"; import { onHelpFunc } from \"../../../support/page_objects/helpers\"; describe(`login_test`, () => { beforeEach('open application', () => { cy.openStageUrl() }); it(`valid_login_test`, function () { onHelpFunc.selectLanguageENG() cy.intercept('POST', '**/login').as('postLogin') onNavigations.navigateToLogin() cy.get('input[name=email]').clear().type(this.users.user_email, { delay: 50 }) cy.get('input[name=password]').type(this.users.user_password, { delay: 50 }) cy.get('button[type=submit]').should('contain.text', 'LOGIN').click() cy.wait('@postLogin').its('response.statusCode') .should('eq', 200) onNavigations.navigateToProfileMenu() onNavigations.navigateToLogout() }) }); plugins (This folder contains the plugins or listeners) cypress\\plugin\\index.js reports (This folder contains html reports runnable within your browser) mocha mochareports (This folder contain report.html file) support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) deleteAllPhotos() { cy.get('nav').next().find('div').find('img').then(listing => { const photoCounter = Cypress.$(listing).length expect(listing).to.have.length(photoCounter) for (let i = 0; i < photoCounter; i++) { cy.intercept('DELETE', '**/photo/*').as('deletePhoto') cy.get('nav').next().find('span').should('contain.text', 'Waiting for Approval').first() .next().find('span').last().as('deletebutton') cy.get('@deletebutton').should('contain.text', 'Delete').click({ force: true }).wait(2000).then(el => { cy.get('#modal-root').find('button').first().should('contain.text', 'Delete').click().wait(2000) }) cy.wait('@deletePhoto').its('response.statusCode').should('eq', 200) cy.waitUntil(() => cy.get('[role=\"alert\"]').click()) } }) } navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) navigateToPhotosTab() { cy.intercept('GET', '**/photo*').as('getPhoto') cy.get('nav').find('a[href=\"/profile/photos/public\"]').click() cy.wait('@getPhoto').its('response.statusCode') .should('be.oneOf', [200]) } login_page.js (Functions or actions. E.g. login different users) loginWithEmailAndPassword(email, password) { cy.intercept('POST', '**/login').as('postLogin') // Intercept POST cy.contains('#root', 'WELCOME BACK').find('form').then(form => { cy.wrap(form).find('[type=\"email\"]').type(email) cy.wrap(form).find('[type=\"password\"]').type(password) // cy.wrap(form).find('[type=\"checkbox\"]').check({ force: true }) cy.wrap(form).submit() }) cy.wait('@postLogin').its('response.statusCode') .should('be.oneOf', [200]) // Verify Status code } commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openstageUrl', () => { cy.visit(Cypress.env('stageUrl')) cy.fixture('users').then(function (users) { this.users = users }) cy.waitUntil(() => cy.title().should('include', 'Site Name')) }) index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) videos (This folder contains videos that will be saved after test execution) node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) devUrl: https//develop.xxxxx.date stageUrl: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000` \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" e2e-run-tests.js (This file contains run commands) cypress.run() spec: \"test.spec.js\" package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \"scripts\": { \u201ccypress:open\u201d: \u201cnode_modules\\\\.bin\\\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d } devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json","title":"05. Brief Details About The Files And Folders"},{"location":"pages/framework_setup/fs_cypress/#06-additional-details","text":"Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations.","title":"06. Additional Details"},{"location":"pages/framework_setup/fs_cypress/#07-basic-actions","text":"Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html","title":"07. Basic Actions"},{"location":"pages/framework_setup/fs_cypress/#08-useful-links","text":"Cypress Documentation UDEMY - Artem Bondar - Cypress: Web Automation Testing from Zero to Hero Cypress.io Cypress (Web Testing Framework) Crash Course - 2021 AutomationStepbyStep - Cypress Beginner Tutorial Tips & Tricks for Cypress","title":"08. Useful Links"},{"location":"pages/framework_setup/fs_selenium_java/","text":"Java + Selenium + Cucumber + TestProjectIO QA Automation Framework Setup This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main Task Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Selenium Limitations No built-in command for automatic generation of test scripts Handling page load or element load is difficult Creating test cases is time-consuming Difficult to set up test environment as compared to Cypress Pre-Requisites Install GIT (Version Control System) Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEA (Integrated Development Environment) 01. Setup JDK Install JDK 11 for Windows Setup environment variables for Java JDK within your PC Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to Environment Variables: System Properties\\Advanced\\Environment Variables Name: JAVA_HOME Destination C:\\Program Files\\Java\\jdk-11.0.12 02. Setup MAVEN Download Maven (.zip) Create Maven destination folder Navigate to \"C:\\Program Files\\\" Create folder apache-maven-3.6.3 Copy .zip file previously downloaded Unzip that file within C:\\Program Files\\apache-maven-3.6.3\\ folder Setup Environment variables for Maven Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to: System Properties\\Advanced\\Environment Variables Within the root set environment variable name and destination: Name: %MAVEN_HOME% Destination: C:\\Program Files\\apache-maven-3.6.3 03. Setup NodeJS Download NodeJS 14.17.6 Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to: System Properties\\Advanced\\Environment Variables\\Path Within the root set environment variable name and destination: Name: %JAVA_HOME%\\bin Destination: %MAVEN_HOME%\\bin 04. Download Drivers Download Chromedriver Download Selenium 05. Create Working Directory Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir SeleniumProject (This is your Working directory) 06. Clone Project Open Command Promt or Terminal Navigate to Documents/TestingProjects/SeleniumProject folder Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK 07. Brief Details About The Files And Folders project_name/sauce-demo (project root folder) Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When..) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples) cucumber.properties target (Cucumber reports...) classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins) 08. Dependencies List (pom.xml) build plugins plugin groupId: org.apache.maven.plugins artifactId: maven-surefire-plugin version: 3.0.0-M5 configuration: suiteXmlFile: testng.xml groupId: net.masterhought artifactId: maven-cucumber-reporting version: 5.3.0 dependencies dependency optional groupId: io.testproject artifactId: java-sdk version: 1.2.3.-RELEASE groupId: org.seleniumhq.selenium artifactId: selenium-java version: 3.141.59 groupId: org.testng artifactId: testng version: 7.3.0 groupId: io.cucumber artifactId: cucumber-java version: 6.7.0 groupId: io.cucumber artifactId: cucumber-testng version: 6.7.0 groupId: io.cucumber artifactId: cucumber-core version: 6.7.0 groupId: org.junit.jupiter artifactId: junit-jupiter-api version: 5.5.2 groupId: io.cucumber artifactId: cucumber-junit version: 6.11.0 properties maven.compiler.source: 11 maven.compiler.target: 11 09. Basic Actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 10. Useful Links Selenium Webdriver Selenium-Java GitHub Link UltimateQA","title":"Selenium (Java)"},{"location":"pages/framework_setup/fs_selenium_java/#java-selenium-cucumber-testprojectio","text":"","title":"Java + Selenium + Cucumber + TestProjectIO"},{"location":"pages/framework_setup/fs_selenium_java/#qa-automation-framework-setup","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works.","title":"QA Automation Framework Setup"},{"location":"pages/framework_setup/fs_selenium_java/#main-task","text":"Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes.","title":"Main Task"},{"location":"pages/framework_setup/fs_selenium_java/#selenium-limitations","text":"No built-in command for automatic generation of test scripts Handling page load or element load is difficult Creating test cases is time-consuming Difficult to set up test environment as compared to Cypress","title":"Selenium Limitations"},{"location":"pages/framework_setup/fs_selenium_java/#pre-requisites","text":"Install GIT (Version Control System) Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEA (Integrated Development Environment)","title":"Pre-Requisites"},{"location":"pages/framework_setup/fs_selenium_java/#01-setup-jdk","text":"Install JDK 11 for Windows Setup environment variables for Java JDK within your PC Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to Environment Variables: System Properties\\Advanced\\Environment Variables Name: JAVA_HOME Destination C:\\Program Files\\Java\\jdk-11.0.12","title":"01. Setup JDK"},{"location":"pages/framework_setup/fs_selenium_java/#02-setup-maven","text":"Download Maven (.zip) Create Maven destination folder Navigate to \"C:\\Program Files\\\" Create folder apache-maven-3.6.3 Copy .zip file previously downloaded Unzip that file within C:\\Program Files\\apache-maven-3.6.3\\ folder","title":"02. Setup MAVEN"},{"location":"pages/framework_setup/fs_selenium_java/#setup-environment-variables-for-maven","text":"Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to: System Properties\\Advanced\\Environment Variables Within the root set environment variable name and destination: Name: %MAVEN_HOME% Destination: C:\\Program Files\\apache-maven-3.6.3","title":"Setup Environment variables for Maven"},{"location":"pages/framework_setup/fs_selenium_java/#03-setup-nodejs","text":"Download NodeJS 14.17.6 Navigate to System Properties (hit: WinKey, type: env, hit: ENTER): Navigate to: System Properties\\Advanced\\Environment Variables\\Path Within the root set environment variable name and destination: Name: %JAVA_HOME%\\bin Destination: %MAVEN_HOME%\\bin","title":"03. Setup NodeJS"},{"location":"pages/framework_setup/fs_selenium_java/#04-download-drivers","text":"Download Chromedriver Download Selenium","title":"04. Download Drivers"},{"location":"pages/framework_setup/fs_selenium_java/#05-create-working-directory","text":"Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir SeleniumProject (This is your Working directory)","title":"05. Create Working Directory"},{"location":"pages/framework_setup/fs_selenium_java/#06-clone-project","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/SeleniumProject folder Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven","title":"06. Clone Project"},{"location":"pages/framework_setup/fs_selenium_java/#optional","text":"Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK","title":"Optional"},{"location":"pages/framework_setup/fs_selenium_java/#07-brief-details-about-the-files-and-folders","text":"project_name/sauce-demo (project root folder) Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When..) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples) cucumber.properties target (Cucumber reports...) classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins)","title":"07. Brief Details About The Files And Folders"},{"location":"pages/framework_setup/fs_selenium_java/#08-dependencies-list-pomxml","text":"build plugins plugin groupId: org.apache.maven.plugins artifactId: maven-surefire-plugin version: 3.0.0-M5 configuration: suiteXmlFile: testng.xml groupId: net.masterhought artifactId: maven-cucumber-reporting version: 5.3.0 dependencies dependency optional groupId: io.testproject artifactId: java-sdk version: 1.2.3.-RELEASE groupId: org.seleniumhq.selenium artifactId: selenium-java version: 3.141.59 groupId: org.testng artifactId: testng version: 7.3.0 groupId: io.cucumber artifactId: cucumber-java version: 6.7.0 groupId: io.cucumber artifactId: cucumber-testng version: 6.7.0 groupId: io.cucumber artifactId: cucumber-core version: 6.7.0 groupId: org.junit.jupiter artifactId: junit-jupiter-api version: 5.5.2 groupId: io.cucumber artifactId: cucumber-junit version: 6.11.0 properties maven.compiler.source: 11 maven.compiler.target: 11","title":"08. Dependencies List (pom.xml)"},{"location":"pages/framework_setup/fs_selenium_java/#09-basic-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"09. Basic Actions"},{"location":"pages/framework_setup/fs_selenium_java/#10-useful-links","text":"Selenium Webdriver Selenium-Java GitHub Link UltimateQA","title":"10. Useful Links"},{"location":"pages/framework_setup/fs_selenium_python/","text":"Python Framework - Selenium WebDriver - HTML Report QA Automation Framework Setup This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main Task Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites Make sure you have access to git repo https://git.nosolutions.rs/ Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Create Working Directory Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir PycharmProjects (This is your Working directory) 02. Clone Repository Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project: git clone https://git.nosolutions.rs/vladan.furman/selenium_python-onboarding.git Open project in PyCharm 03. Setup Virtual Environment Open Command Promt or Terminal Type: python -m virtualenv venvs\\automations Activate the virtualenv Type: . .\\venvs\\automations\\bin\\activate 04. Install Dependencies selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 05. Install ChromeDriver Make sure your version of Chrome is up-to-date, and install the latest Chromedriver for your version from ChromeDriver Unzip and copy chromedriver to C:/Users/username/PycharmProjects/pytestSelenium_project/venv/bin/ Install all requirements Navigate to: /projects/automations/ Type: pip install -r test-requirements.txt 06. Brief Details About The Files And Folders Project Structure Tree pytestSelenium_project (root folder) Logs (Used to store execution log files) pageObjects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) Reports (This folder contains report.html file) Screenshot (Saved screenshot for specific scenario) TestData (.xml files) tests (This Python Package folder contains test_scripts, and conf folder) /conf/config.ini (This file is common file and contains common fixtures related to test scripts) /test_scripts (This folder contains our actual automation test script \"*.py\") utilities (This Python Package folder contains common utilities functions files) /readProerties.py (This file contains common utility functions.) venvs (This folder contains all dependencies in our virtual environment) requirements.txt (This file represent all dependencies we use) ( pip3 freeze > requirements.txt to create requirements.txt file) 07. Pytest Commands Run specific testcase pytest -v -s tests/test_scripts/test_login.py Run testcase and create html report within \"Reports\" folder pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py 08. Basic Actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 09. Useful Links Selenium Webdriver TechWithTim - Python Selenium Tutorial SDET - Selenium with Python - Hybrid Framework Design from scratch","title":"Selenium (Python)"},{"location":"pages/framework_setup/fs_selenium_python/#python-framework-selenium-webdriver-html-report","text":"","title":"Python Framework - Selenium WebDriver - HTML Report"},{"location":"pages/framework_setup/fs_selenium_python/#qa-automation-framework-setup","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works.","title":"QA Automation Framework Setup"},{"location":"pages/framework_setup/fs_selenium_python/#main-task","text":"Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes.","title":"Main Task"},{"location":"pages/framework_setup/fs_selenium_python/#pre-requisites","text":"Make sure you have access to git repo https://git.nosolutions.rs/ Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Pre-Requisites"},{"location":"pages/framework_setup/fs_selenium_python/#01-create-working-directory","text":"Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir PycharmProjects (This is your Working directory)","title":"01. Create Working Directory"},{"location":"pages/framework_setup/fs_selenium_python/#02-clone-repository","text":"Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project: git clone https://git.nosolutions.rs/vladan.furman/selenium_python-onboarding.git Open project in PyCharm","title":"02. Clone Repository"},{"location":"pages/framework_setup/fs_selenium_python/#03-setup-virtual-environment","text":"Open Command Promt or Terminal Type: python -m virtualenv venvs\\automations Activate the virtualenv Type: . .\\venvs\\automations\\bin\\activate","title":"03. Setup Virtual Environment"},{"location":"pages/framework_setup/fs_selenium_python/#04-install-dependencies","text":"selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1","title":"04. Install Dependencies"},{"location":"pages/framework_setup/fs_selenium_python/#05-install-chromedriver","text":"Make sure your version of Chrome is up-to-date, and install the latest Chromedriver for your version from ChromeDriver Unzip and copy chromedriver to C:/Users/username/PycharmProjects/pytestSelenium_project/venv/bin/","title":"05. Install ChromeDriver"},{"location":"pages/framework_setup/fs_selenium_python/#install-all-requirements","text":"Navigate to: /projects/automations/ Type: pip install -r test-requirements.txt","title":"Install all requirements"},{"location":"pages/framework_setup/fs_selenium_python/#06-brief-details-about-the-files-and-folders","text":"","title":"06. Brief Details About The Files And Folders"},{"location":"pages/framework_setup/fs_selenium_python/#project-structure-tree","text":"pytestSelenium_project (root folder) Logs (Used to store execution log files) pageObjects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) Reports (This folder contains report.html file) Screenshot (Saved screenshot for specific scenario) TestData (.xml files) tests (This Python Package folder contains test_scripts, and conf folder) /conf/config.ini (This file is common file and contains common fixtures related to test scripts) /test_scripts (This folder contains our actual automation test script \"*.py\") utilities (This Python Package folder contains common utilities functions files) /readProerties.py (This file contains common utility functions.) venvs (This folder contains all dependencies in our virtual environment) requirements.txt (This file represent all dependencies we use) ( pip3 freeze > requirements.txt to create requirements.txt file)","title":"Project Structure Tree"},{"location":"pages/framework_setup/fs_selenium_python/#07-pytest-commands","text":"","title":"07. Pytest Commands"},{"location":"pages/framework_setup/fs_selenium_python/#run-specific-testcase","text":"pytest -v -s tests/test_scripts/test_login.py","title":"Run specific testcase"},{"location":"pages/framework_setup/fs_selenium_python/#run-testcase-and-create-html-report-within-reports-folder","text":"pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py","title":"Run testcase and create html report within \"Reports\" folder"},{"location":"pages/framework_setup/fs_selenium_python/#08-basic-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"08. Basic Actions"},{"location":"pages/framework_setup/fs_selenium_python/#09-useful-links","text":"Selenium Webdriver TechWithTim - Python Selenium Tutorial SDET - Selenium with Python - Hybrid Framework Design from scratch","title":"09. Useful Links"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/","text":"Python - SeleniumBase Framework QA Automation Framework Setup This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main Task Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites Make sure you have access to git repo: https://git.nosolutions.rs/ Make sure you have ssh access to your account and key is already added for account. Install Python Install PyCharm 01. Create A New Project - PyCharm Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir PyCharmProjects (This is your Working directory) 02. Clone Project Open Command Promt or Terminal Navigate to Documents/TestingProjects/PycharmProjects/ folder Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-seleniumbase.git 03. Setup Virtual Environment - PyCharm 04. Install SeleniumBaseIO Open Terminal and type pip3 install seleniumbase seleniumbase (or sbase ) (to check if the installation is passed) 05. Install ChromeDriver Open Terminal and type sbase install chromedriver latest or sbase install chromedriver 97.0.4692.71 06. SeleniumBase Commands Run all tests Type pytest and hit ENTER Run specific testcase and generate html report Type pytest -k test_home and hit ENTER 07. Brief Details About The Files And Folders pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use) (pip3 freeze > requirements.txt (to create req.txt file)) 08. Useful Links SeleniumBase Documentation MichaelMintz - SeleniumBase Test Automation Framework Tutorial Automation Bro - Dilpreet Johal - Selenium Python using SeleniumBase Framework / 3 Hours","title":"Selenium (Python-SeleniumBase)"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#python-seleniumbase-framework","text":"","title":"Python - SeleniumBase Framework"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#qa-automation-framework-setup","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works.","title":"QA Automation Framework Setup"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#main-task","text":"Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes.","title":"Main Task"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#pre-requisites","text":"Make sure you have access to git repo: https://git.nosolutions.rs/ Make sure you have ssh access to your account and key is already added for account. Install Python Install PyCharm","title":"Pre-Requisites"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#01-create-a-new-project-pycharm","text":"Open Command Promt or Terminal Navigate to Documents folder, type cd Documents (Or type: cd Doc + hit: Tab , hit: Enter ) Within Documents folder type mkdir TestingProjects (Folder that hold all of your projects) Within TestingProjects folder type mkdir PyCharmProjects (This is your Working directory)","title":"01. Create A New Project - PyCharm"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#02-clone-project","text":"Open Command Promt or Terminal Navigate to Documents/TestingProjects/PycharmProjects/ folder Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-seleniumbase.git","title":"02. Clone Project"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#03-setup-virtual-environment-pycharm","text":"","title":"03. Setup Virtual Environment - PyCharm"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#04-install-seleniumbaseio","text":"Open Terminal and type pip3 install seleniumbase seleniumbase (or sbase ) (to check if the installation is passed)","title":"04. Install SeleniumBaseIO"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#05-install-chromedriver","text":"Open Terminal and type sbase install chromedriver latest or sbase install chromedriver 97.0.4692.71","title":"05. Install ChromeDriver"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#06-seleniumbase-commands","text":"Run all tests Type pytest and hit ENTER Run specific testcase and generate html report Type pytest -k test_home and hit ENTER","title":"06. SeleniumBase Commands"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#07-brief-details-about-the-files-and-folders","text":"pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use) (pip3 freeze > requirements.txt (to create req.txt file))","title":"07. Brief Details About The Files And Folders"},{"location":"pages/framework_setup/fs_selenium_python_seleniumbase/#08-useful-links","text":"SeleniumBase Documentation MichaelMintz - SeleniumBase Test Automation Framework Tutorial Automation Bro - Dilpreet Johal - Selenium Python using SeleniumBase Framework / 3 Hours","title":"08. Useful Links"},{"location":"pages/qa-box/qa_code_review/","text":"[QA Box] Code Review The primary goal of the code review process is to assess any new code for bugs, errors, and quality standards set by the organization. Benefit of the code review process is the collective team\u2019s improved coding skills. Code review is a very important phenomenon in the SOFTWARE development process. Made popular by the open-source community, it is now the standard for any team of developers. If it is executed correctly, the benefit is not only in reducing the number of bugs and better code quality but also in the training effect for the programmer. Code review is critical for the following reasons: Ensure that you have no bugs in the code. Minimize your chances of having issues. Confirm new code adheres to guidelines. Increase the efficiency of the new code. Code reviews further lead to improving other team members' expertise. As a senior developer typically conducts a code review, a junior developer may use this feedback to improve their own coding. Code review levels Typos and problems with styles (this is the first thing that catches the eye with a cursory code review). This item should be excluded from the code review process using automation. Problems with names, functions, classes, folders, and files. The location of the code in the project i.e. whether this function is located in the desired file, class. Whether this class is located in the right folder in the right place in your project. And whether this code is necessary at all. Perhaps this function is already implemented, but people just do not know about its existence. It may be much better to use some well-known library that solves this problem instead of writing this new code. Algorithms and approaches. Reviewed as a principle your approach fits into the system. Criticize the selected algorithm or approach. They are trying to understand a more general picture of what is happening. Shortcomings - pay attention to during code review No Proof of Success. The automation scripts need to run successfully in order to pass review, and proof of success (such as a log or a screenshot) must be attached to the review. Typos and Bad Formatting. Typos and bad formatting reflect carelessness, cause frustration, and damage reputation. They are especially bad for Behavior-Driven Development frameworks. Hard-Coded Values. Hard-coded values often indicate hasty development. Sometimes, they aren\u2019t a big problem, but they can cripple an automation code base\u2019s flexibility. Incorrect Test Coverage. It is surprisingly common to see an automation script that doesn\u2019t actually cover the intended test steps. A step from the test procedure may be missing, or an assertion may yield a false positive. Sometimes, assertions may not even be performed! When reviewing tests, keep the original test procedure handy, and watch out for missing coverage. Unclear Comments. Leaving unclear comments to the author for any changes needed is the most reviewers make. It is necessary to put in clear comments to create space for dialogue. Poor Code Placement. Automation projects tend to grow fast. Along with new tests, new shared code like page objects and data models are added all the time. Maintaining a good, organized structure is necessary for project scalability and teamwork. Test cases should be organized by feature area. Common code should be abstracted from test cases and put into shared libraries. Framework-level code for things like inputs and logging should be separated from test-level code. If the code is put in the wrong place, it could be difficult to find or reuse. It could also create a dependency nightmare. For example, non-web tests should not have a dependency on Selenium WebDriver. Make sure the new code is put in the right place. Bad Config Changes. As a general rule, submit any config changes in a separate code review from other changes, and provide a thorough explanation to the reviewers for why the change is needed. Brittleness. Here are a few examples of brittleness to watch out for in review: Do test cases have adequate cleanup routines, even when they crash? Are all exceptions handled properly, even unexpected ones? Is Selenium WebDriver always disposed of? Will SSH connections be automatically reconnected if dropped? Are XPaths too loose or too strict? Is a REST API response code of 201 just as good as 200? Ignoring Design. Many reviewers ignore the overall design and just focus on the functionality and workability of the automation script. But by doing this, they miss the role of the automation script in the whole system and how it fits into what is already there. Duplication is the biggest problem for test automation. Many testing operations are inherently repetitive. Engineers sometimes just copy-paste code blocks, rather than seek existing methods or add new helpers, to save development time. Plus, it can be difficult to find reusable parts that meet immediate needs in a large codebase. Nevertheless, good code reviews should catch code redundancy and suggest better solutions. Conclusion The code review stage is highly underestimated in the testing and quality assurance process. If you are a tester who works within the framework of iterative development, familiarization with pull requests should be an integral part of your work after familiarization with the requirements. On the other hand, your code should also be viewed by other team members, which is a key factor in mastering test automation.","title":"Code Review"},{"location":"pages/qa-box/qa_code_review/#qa-box-code-review","text":"The primary goal of the code review process is to assess any new code for bugs, errors, and quality standards set by the organization. Benefit of the code review process is the collective team\u2019s improved coding skills. Code review is a very important phenomenon in the SOFTWARE development process. Made popular by the open-source community, it is now the standard for any team of developers. If it is executed correctly, the benefit is not only in reducing the number of bugs and better code quality but also in the training effect for the programmer. Code review is critical for the following reasons: Ensure that you have no bugs in the code. Minimize your chances of having issues. Confirm new code adheres to guidelines. Increase the efficiency of the new code. Code reviews further lead to improving other team members' expertise. As a senior developer typically conducts a code review, a junior developer may use this feedback to improve their own coding.","title":"[QA Box] Code Review"},{"location":"pages/qa-box/qa_code_review/#code-review-levels","text":"Typos and problems with styles (this is the first thing that catches the eye with a cursory code review). This item should be excluded from the code review process using automation. Problems with names, functions, classes, folders, and files. The location of the code in the project i.e. whether this function is located in the desired file, class. Whether this class is located in the right folder in the right place in your project. And whether this code is necessary at all. Perhaps this function is already implemented, but people just do not know about its existence. It may be much better to use some well-known library that solves this problem instead of writing this new code. Algorithms and approaches. Reviewed as a principle your approach fits into the system. Criticize the selected algorithm or approach. They are trying to understand a more general picture of what is happening.","title":"Code review levels"},{"location":"pages/qa-box/qa_code_review/#shortcomings-pay-attention-to-during-code-review","text":"No Proof of Success. The automation scripts need to run successfully in order to pass review, and proof of success (such as a log or a screenshot) must be attached to the review. Typos and Bad Formatting. Typos and bad formatting reflect carelessness, cause frustration, and damage reputation. They are especially bad for Behavior-Driven Development frameworks. Hard-Coded Values. Hard-coded values often indicate hasty development. Sometimes, they aren\u2019t a big problem, but they can cripple an automation code base\u2019s flexibility. Incorrect Test Coverage. It is surprisingly common to see an automation script that doesn\u2019t actually cover the intended test steps. A step from the test procedure may be missing, or an assertion may yield a false positive. Sometimes, assertions may not even be performed! When reviewing tests, keep the original test procedure handy, and watch out for missing coverage. Unclear Comments. Leaving unclear comments to the author for any changes needed is the most reviewers make. It is necessary to put in clear comments to create space for dialogue. Poor Code Placement. Automation projects tend to grow fast. Along with new tests, new shared code like page objects and data models are added all the time. Maintaining a good, organized structure is necessary for project scalability and teamwork. Test cases should be organized by feature area. Common code should be abstracted from test cases and put into shared libraries. Framework-level code for things like inputs and logging should be separated from test-level code. If the code is put in the wrong place, it could be difficult to find or reuse. It could also create a dependency nightmare. For example, non-web tests should not have a dependency on Selenium WebDriver. Make sure the new code is put in the right place. Bad Config Changes. As a general rule, submit any config changes in a separate code review from other changes, and provide a thorough explanation to the reviewers for why the change is needed. Brittleness. Here are a few examples of brittleness to watch out for in review: Do test cases have adequate cleanup routines, even when they crash? Are all exceptions handled properly, even unexpected ones? Is Selenium WebDriver always disposed of? Will SSH connections be automatically reconnected if dropped? Are XPaths too loose or too strict? Is a REST API response code of 201 just as good as 200? Ignoring Design. Many reviewers ignore the overall design and just focus on the functionality and workability of the automation script. But by doing this, they miss the role of the automation script in the whole system and how it fits into what is already there. Duplication is the biggest problem for test automation. Many testing operations are inherently repetitive. Engineers sometimes just copy-paste code blocks, rather than seek existing methods or add new helpers, to save development time. Plus, it can be difficult to find reusable parts that meet immediate needs in a large codebase. Nevertheless, good code reviews should catch code redundancy and suggest better solutions.","title":"Shortcomings - pay attention to during code review"},{"location":"pages/qa-box/qa_code_review/#conclusion","text":"The code review stage is highly underestimated in the testing and quality assurance process. If you are a tester who works within the framework of iterative development, familiarization with pull requests should be an integral part of your work after familiarization with the requirements. On the other hand, your code should also be viewed by other team members, which is a key factor in mastering test automation.","title":"Conclusion"},{"location":"pages/qa-box/qa_coding_guidelines/","text":"[QA Box] Coding Guidelines Automated testing is no longer an option, it\u2019s a must-have in every tester\u2019s bag of tricks. With software being rolled out faster to meet ever-increasing customer demands and competition, test automation will continue to be on the rise. Testing early and fast helps identify bugs faster, saves time, effort and costs to a large extent. I have come across and followed some useful coding guidelines which I feel every QA automation tester should follow during test automation script creation. Hope you people find it helpful. Programming Follow Programming Language Guidelines (method name-getPayload(), class name- APIEndpoints, package name-com.testingsumo.backend.tests, variable name-authToken) Follow Oops Concepts Wherever Possible - Abstraction(base classes), Inheritance(multiple implementations of same things/multiple inheritances), Polymorphism(many forms with something different), Data Hiding(hide unnecessary/sensitive info), Encapsulation(Bind small entities into a single large entity) Write clean code Keep it simple. Always look over your code and ask yourself if there's a simpler way of doing what it is that you are trying to do. Sometimes the obvious solution to a testing problem only becomes clear after you have solved it in a complicated way; now it's time to go back and solve it more elegantly. Don't repeat yourself. If there's something you're doing in more than one test - for example, logging in to the application - write a method that you can call instead of putting those steps into every test. Similarly, create a file where you save all of your variables and element locators, and have all of your tests refer to that file. That way if a variable or a locator changes, you can make the change in one place rather than several. Be consistent. Consistent code is easier to read. Be consistent with your casing: if you have a variable for the user's first name called \u201cfirstName\u201d, don't make the variable for the user's last name \"LastName\". Follow the conventions that your developers are using: if they indent with two spaces, you should too. If they put their opening curly braces on a separate line, you should as well. Comment your code. It's not always obvious what test automation code is doing at first glance, and while you might be quite used to the syntax you are using for your tests, your developers might not be familiar with it. Simple comments like \"Polling the queue for the delete request\" can be really helpful in explaining your intent. Moreover, what might seem really obvious to you now might not be obvious in three months when you need to update the test! Your future self will thank you for the comments you write today. Reduce code duplication (think before writing new code, can I use/make changes in existing code?) Increase code reusability Make your code generic wherever possible Leave no hardcoded data in source code Keep your static data outside the source code Keep your dynamic data dynamic in test code (fetch it from DB queries or scripts) Test your code properly, use IDE options such as call hierarchy or show usage to test your changes end 2 end Framework and Debugging Use Extensive logging- everything which is part of source code should be analyzed from logs without looking at the source code Generate and save failure proofs outside the src code- videos/data/screenshots/logs Focus on making your code scalable and faster without compromising the code quality Your code should be platform and system independent Use as many assertions as possible focus on automated testing rather than automation Leave no hardcoded data in source code Always think for the future, separate out tech dependencies so that migration to new tech is easy in case it is needed Keep your tests independent for better results in multithreading unless they are related (for example publisher-subscriber related tests) Use Proper Documentation Create code that can be easily read and modified by others","title":"Coding Guidelines"},{"location":"pages/qa-box/qa_coding_guidelines/#qa-box-coding-guidelines","text":"Automated testing is no longer an option, it\u2019s a must-have in every tester\u2019s bag of tricks. With software being rolled out faster to meet ever-increasing customer demands and competition, test automation will continue to be on the rise. Testing early and fast helps identify bugs faster, saves time, effort and costs to a large extent. I have come across and followed some useful coding guidelines which I feel every QA automation tester should follow during test automation script creation. Hope you people find it helpful.","title":"[QA Box] Coding Guidelines"},{"location":"pages/qa-box/qa_coding_guidelines/#programming","text":"Follow Programming Language Guidelines (method name-getPayload(), class name- APIEndpoints, package name-com.testingsumo.backend.tests, variable name-authToken) Follow Oops Concepts Wherever Possible - Abstraction(base classes), Inheritance(multiple implementations of same things/multiple inheritances), Polymorphism(many forms with something different), Data Hiding(hide unnecessary/sensitive info), Encapsulation(Bind small entities into a single large entity) Write clean code Keep it simple. Always look over your code and ask yourself if there's a simpler way of doing what it is that you are trying to do. Sometimes the obvious solution to a testing problem only becomes clear after you have solved it in a complicated way; now it's time to go back and solve it more elegantly. Don't repeat yourself. If there's something you're doing in more than one test - for example, logging in to the application - write a method that you can call instead of putting those steps into every test. Similarly, create a file where you save all of your variables and element locators, and have all of your tests refer to that file. That way if a variable or a locator changes, you can make the change in one place rather than several. Be consistent. Consistent code is easier to read. Be consistent with your casing: if you have a variable for the user's first name called \u201cfirstName\u201d, don't make the variable for the user's last name \"LastName\". Follow the conventions that your developers are using: if they indent with two spaces, you should too. If they put their opening curly braces on a separate line, you should as well. Comment your code. It's not always obvious what test automation code is doing at first glance, and while you might be quite used to the syntax you are using for your tests, your developers might not be familiar with it. Simple comments like \"Polling the queue for the delete request\" can be really helpful in explaining your intent. Moreover, what might seem really obvious to you now might not be obvious in three months when you need to update the test! Your future self will thank you for the comments you write today. Reduce code duplication (think before writing new code, can I use/make changes in existing code?) Increase code reusability Make your code generic wherever possible Leave no hardcoded data in source code Keep your static data outside the source code Keep your dynamic data dynamic in test code (fetch it from DB queries or scripts) Test your code properly, use IDE options such as call hierarchy or show usage to test your changes end 2 end","title":"Programming"},{"location":"pages/qa-box/qa_coding_guidelines/#framework-and-debugging","text":"Use Extensive logging- everything which is part of source code should be analyzed from logs without looking at the source code Generate and save failure proofs outside the src code- videos/data/screenshots/logs Focus on making your code scalable and faster without compromising the code quality Your code should be platform and system independent Use as many assertions as possible focus on automated testing rather than automation Leave no hardcoded data in source code Always think for the future, separate out tech dependencies so that migration to new tech is easy in case it is needed Keep your tests independent for better results in multithreading unless they are related (for example publisher-subscriber related tests) Use Proper Documentation Create code that can be easily read and modified by others","title":"Framework and Debugging"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/","text":"[QA Box] Advanced Coding Guidelines Purpose The purpose of this document is to document and follow Naming conventions and guidelines during coding framework designing for Test Automation project. 01. Naming Conventions File names should be in lower case and each word separated by _ . The name should self explanatory. e.g project_test_login.spec.js , or if using Python project_test_login.py Data / Document files : Camelcase and name should self explanatory. e.g Project_Automation_README.do , or Project_Automation_README.md Class names should follow the UpperCaseCamelCase convention. e.g. class LowLevelLib , or BaseClass , LoginStepDefinitions Variable names should be in lower case and should be self explanatory e.g single_textbox_question , or standard_user Function names should start with lowercase word and then Camelcase should be followed. It should be self explanatory e.g. fillQuestionAndAnswer , or clickOnLoginButton 02. Project Organization Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the cypress.json file, or if using Selenium, method setDriver within src\\main\\java\\package_directory\\BaseClass . Run tests, that are crucial at the moment if Cypres user: use cy.only and cy.skip , if Python Selenium user: Need to \"Debug\" script to the desired point that determined previously Use your own custom commands, and page objects Add your command to the commands.js file Use the best selectors like CSS , By ID , By ClassName , xPath (In Selenium and Python Only) Add assertions - to be sure that you are referring to the right element at the right time instead of \"static\" wait(ms). Using Cypress: should('contain.text', 'Login') Using Cypress: should('be.visible') Using Selenium, Python: self.applicant_acc_settings.profile_picture.is_present() Don't forget to stretch in between the tests 03. Coding Standards Quotes: Use single-quotes for string literals, e.g. 'my-identifier' , but use double-quotes for strings that are likely to contain single-quote characters as part of the string itself (such as error messages, or any strings containing natural language), e.g. \"You've got an error!\" . For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in PEP 257. Imports grouping: Should be grouped in the following order (Python Selenium Only) standard library imports related third party imports local application/library specific imports Import code: You should put a blank line between each group of imports. Don\u2019t use joker from module import * . Instead list the names you need explicitly: from module import name1, name2 . Examples: Cypress: import { onNavigations } from \"../../../support.page_obejcts/navigations\" Selenium, Python: from project.page_objects.registration.welcome_page import WelcomePage Consistent Indentation: (Python Only) Spaces are the preferred indentation method. Tabs should be used solely to remain consistent with code that is already indented with tabs. Python 3 disallows mixing the use of tabs and spaces for indentation. Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively. When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended! Avoid Obvious Comments: Commenting your code is fantastic; however, it can be overdone or just be plain redundant. Take this example: # get the country code country_code = get_country_code(remote_address) # if country code is US if country_code == 'US': // display the form input for state form_input_state() When the text is that obvious, it's really not productive to repeat it within comments. If you must comment on that code, you can simply combine it to a single line instead: # display state selection for US users country_code = get_country_code(remote_address) If country_code == 'US': form_input_state() Code Grouping: More often than not, certain tasks require a few lines of code. It is a good idea to keep these tasks within separate blocks of code, with some spaces between them: # import local application/library from xpath import xpath_list 04. Framework Guidelines Test case data should be kept in separate files. Logs and Reports folder should be maintained. Proper logs should be maintained. Html Reports should be generated. Rerunning of automation scripts should not override the old reports. Proper Exception Handling should be done. Your framework should contain the Readme.md file which explains the execution steps. Setup file should be created which includes all dependencies installation. Virtual environment of python should be done correctly so that all dependencies and packages installed separately. Make sure the objective for your code is clear. That reflects, use meaningful names for your variables, functions, classes, modules, files etc. While doing so, make sure you don't accidentally use the standard function name or module name. (Refer: http://pycogent.org/coding_guidelines.html ). Add proper module, class, function level doc-comments. If possible, include example in doc-comments. Don\u2019t try to put too much code under one function. 200 lines is an absolute maximum \u2013 50 is usually more reasonable. Remove the commented code. If required, it could be brought back by source revisions. Remove any duplicate code if exist. This could be done by moving duplicated code under a function and calling those instead. Check if code could be simpler. Break complex routines down into smaller ones, consider using built-in functions and data types instead of custom ones, see if complex logic can be separated into a dispatch routine and simple individual functions, etc. Make use of existing framework functions/APIs/utility methods instead of writing new. If any improvement on existing framework is possible, do that but get it reviewed prior to commit. Follow the PEP8 guidelines. It's much more easy from the IDE you use. Like for ex: In PyCharm you can convert your code as per PEP8 standards by shortcut Opt+Cmd+L. 05. About HTML Elements Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Bad Coding - Good Coding Examples Wait for page to load BAD public void waitForPageToLoad ( String string ){ String url = browserDriver . getCurrentUrl (); Boolean stringExists = url . contains ( string ); int Count = 0 ; while ( Boolean . FALSE . equals ( stringExists ) && Count < 100 ){ url = browserDriver . getCurrentUrl (); stringExists = url . contains ( string ); Count = Count + 1 ; try { Thread . sleep ( 500 ); } catch ( InterruptedException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } //if(stringExists==false) if ( Boolean . FALSE . equals ( stringExists )) throw new IllegalStateException ( \u201c Page not loaded . Current page \u201d + \u201c is : \u201c + browserDriver . getCurrentUrl ()); } } GOOD public void isUrlCorrect ( String keyword ){ int count = 0 ; do { count ++ ; waitFor ( 1 ); } while ( urlContains ( keyword ) == false && count < 30 ); if ( count == 30 ) throw new PageNotDisplayedException ( \u201c Page not loaded \u201d );; } private void urlContains ( String keyword ) { return driver . getCurrentUrl (). contains ( keyword ); } BEST WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( ExpectedConditions . urlContains ( keyword )); Click elements BAD public void Click (){ driver . manage (). timeouts (). implicitlyWait ( 5 , TimeUnit . SECONDS ); try { wait . until ( ExpectedConditions . elementToBeClickable ( locator )); driver . findElement ( locator ). click (); System . out . println ( \u201c Clicked webelement at : \u201c + locator ); } catch ( RuntimeException e ) { System . out . println ( e ); WaitMilliSeconds ( 500 ); if ( Boolean . FALSE . equals ( driver . findElement ( locator ). isEnabled ())) throw new NoSuchElementException ( \u201c Elment not found at locator : \u201c + locator ); driver . findElement ( locator ). click (); } } GOOD public void click (){ WebElement element = this . wait . until ( ExpectedConditions . elementToBeClickable ( this . locator )); element . click (); } Send keys BAD public void SendKeys ( String text ){ wait = ( new WebDriverWait ( driver , 4 )); try { wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); driver . findElement ( locator ). sendKeys ( text ); System . out . println ( \u201c Entered sendKey text : \u201c + text ); //SendKeyEnter(); System . out . println ( \u201c Click Enter \u201d ); WaitMilliSeconds ( 1000 ); } catch ( RuntimeException e ) { System . out . println ( \u201c\\ nSecond attempt to SendKey text : \u201d + text ); Wait (); driver . findElement ( locator ). sendKeys ( text ); SendKeyEnter (); } } GOOD public void sendKeys ( String text ){ WebElement element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); element . sendKeys ( text ); } Wait until web element is clickable BAD public void WaitUntilWebElementClickable (){ try { wait . until ( ExpectedConditions . elementToBeClickable ( locator )); } catch ( RuntimeException e ) { WaitMilliSeconds ( 2000 ); driver . navigate (). refresh (); System . out . println ( \u201c refresh internally \u2026\u201d ); wait . until ( ExpectedConditions . elementToBeClickable ( driver . findElement ( locator ))); } } GOOD public void waitUntilElementClickable (){ wait . until ( ExpectedConditions . elementToBeClickable ( locator )); } Get text BAD public String getText () { try { wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); return driver . findElement ( locator ). getText (). toString (). trim (); } catch ( RuntimeException e ){ System . out . println ( \u201c getText () exception : \u201c + e ); return \u201c\u201d ; } } GOOD public String getText () { WebElement element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); return element . getText (). trim (); } 07. Useful Links Docstring Conventions Cypress Best Practice Selenium Best Practice Selenium Best Practice - TestProjectIO Software Testing Guidelines","title":"Advanced Coding Guidelines"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#qa-box-advanced-coding-guidelines","text":"","title":"[QA Box] Advanced Coding Guidelines"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#purpose","text":"The purpose of this document is to document and follow Naming conventions and guidelines during coding framework designing for Test Automation project.","title":"Purpose"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#01-naming-conventions","text":"File names should be in lower case and each word separated by _ . The name should self explanatory. e.g project_test_login.spec.js , or if using Python project_test_login.py Data / Document files : Camelcase and name should self explanatory. e.g Project_Automation_README.do , or Project_Automation_README.md Class names should follow the UpperCaseCamelCase convention. e.g. class LowLevelLib , or BaseClass , LoginStepDefinitions Variable names should be in lower case and should be self explanatory e.g single_textbox_question , or standard_user Function names should start with lowercase word and then Camelcase should be followed. It should be self explanatory e.g. fillQuestionAndAnswer , or clickOnLoginButton","title":"01. Naming Conventions"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#02-project-organization","text":"Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the cypress.json file, or if using Selenium, method setDriver within src\\main\\java\\package_directory\\BaseClass . Run tests, that are crucial at the moment if Cypres user: use cy.only and cy.skip , if Python Selenium user: Need to \"Debug\" script to the desired point that determined previously Use your own custom commands, and page objects Add your command to the commands.js file Use the best selectors like CSS , By ID , By ClassName , xPath (In Selenium and Python Only) Add assertions - to be sure that you are referring to the right element at the right time instead of \"static\" wait(ms). Using Cypress: should('contain.text', 'Login') Using Cypress: should('be.visible') Using Selenium, Python: self.applicant_acc_settings.profile_picture.is_present() Don't forget to stretch in between the tests","title":"02. Project Organization"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#03-coding-standards","text":"Quotes: Use single-quotes for string literals, e.g. 'my-identifier' , but use double-quotes for strings that are likely to contain single-quote characters as part of the string itself (such as error messages, or any strings containing natural language), e.g. \"You've got an error!\" . For triple-quoted strings, always use double quote characters to be consistent with the docstring convention in PEP 257. Imports grouping: Should be grouped in the following order (Python Selenium Only) standard library imports related third party imports local application/library specific imports Import code: You should put a blank line between each group of imports. Don\u2019t use joker from module import * . Instead list the names you need explicitly: from module import name1, name2 . Examples: Cypress: import { onNavigations } from \"../../../support.page_obejcts/navigations\" Selenium, Python: from project.page_objects.registration.welcome_page import WelcomePage Consistent Indentation: (Python Only) Spaces are the preferred indentation method. Tabs should be used solely to remain consistent with code that is already indented with tabs. Python 3 disallows mixing the use of tabs and spaces for indentation. Python 2 code indented with a mixture of tabs and spaces should be converted to using spaces exclusively. When invoking the Python 2 command line interpreter with the -t option, it issues warnings about code that illegally mixes tabs and spaces. When using -tt these warnings become errors. These options are highly recommended! Avoid Obvious Comments: Commenting your code is fantastic; however, it can be overdone or just be plain redundant. Take this example: # get the country code country_code = get_country_code(remote_address) # if country code is US if country_code == 'US': // display the form input for state form_input_state() When the text is that obvious, it's really not productive to repeat it within comments. If you must comment on that code, you can simply combine it to a single line instead: # display state selection for US users country_code = get_country_code(remote_address) If country_code == 'US': form_input_state() Code Grouping: More often than not, certain tasks require a few lines of code. It is a good idea to keep these tasks within separate blocks of code, with some spaces between them: # import local application/library from xpath import xpath_list","title":"03. Coding Standards"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#04-framework-guidelines","text":"Test case data should be kept in separate files. Logs and Reports folder should be maintained. Proper logs should be maintained. Html Reports should be generated. Rerunning of automation scripts should not override the old reports. Proper Exception Handling should be done. Your framework should contain the Readme.md file which explains the execution steps. Setup file should be created which includes all dependencies installation. Virtual environment of python should be done correctly so that all dependencies and packages installed separately. Make sure the objective for your code is clear. That reflects, use meaningful names for your variables, functions, classes, modules, files etc. While doing so, make sure you don't accidentally use the standard function name or module name. (Refer: http://pycogent.org/coding_guidelines.html ). Add proper module, class, function level doc-comments. If possible, include example in doc-comments. Don\u2019t try to put too much code under one function. 200 lines is an absolute maximum \u2013 50 is usually more reasonable. Remove the commented code. If required, it could be brought back by source revisions. Remove any duplicate code if exist. This could be done by moving duplicated code under a function and calling those instead. Check if code could be simpler. Break complex routines down into smaller ones, consider using built-in functions and data types instead of custom ones, see if complex logic can be separated into a dispatch routine and simple individual functions, etc. Make use of existing framework functions/APIs/utility methods instead of writing new. If any improvement on existing framework is possible, do that but get it reviewed prior to commit. Follow the PEP8 guidelines. It's much more easy from the IDE you use. Like for ex: In PyCharm you can convert your code as per PEP8 standards by shortcut Opt+Cmd+L.","title":"04. Framework Guidelines"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#05-about-html-elements","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. About HTML Elements"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#06-bad-coding-good-coding","text":"","title":"06. Bad Coding - Good Coding"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#examples","text":"","title":"Examples"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#wait-for-page-to-load","text":"BAD public void waitForPageToLoad ( String string ){ String url = browserDriver . getCurrentUrl (); Boolean stringExists = url . contains ( string ); int Count = 0 ; while ( Boolean . FALSE . equals ( stringExists ) && Count < 100 ){ url = browserDriver . getCurrentUrl (); stringExists = url . contains ( string ); Count = Count + 1 ; try { Thread . sleep ( 500 ); } catch ( InterruptedException e ) { // TODO Auto-generated catch block e . printStackTrace (); } } //if(stringExists==false) if ( Boolean . FALSE . equals ( stringExists )) throw new IllegalStateException ( \u201c Page not loaded . Current page \u201d + \u201c is : \u201c + browserDriver . getCurrentUrl ()); } } GOOD public void isUrlCorrect ( String keyword ){ int count = 0 ; do { count ++ ; waitFor ( 1 ); } while ( urlContains ( keyword ) == false && count < 30 ); if ( count == 30 ) throw new PageNotDisplayedException ( \u201c Page not loaded \u201d );; } private void urlContains ( String keyword ) { return driver . getCurrentUrl (). contains ( keyword ); } BEST WebDriverWait wait = new WebDriverWait ( driver , 30 ); wait . until ( ExpectedConditions . urlContains ( keyword ));","title":"Wait for page to load"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#click-elements","text":"BAD public void Click (){ driver . manage (). timeouts (). implicitlyWait ( 5 , TimeUnit . SECONDS ); try { wait . until ( ExpectedConditions . elementToBeClickable ( locator )); driver . findElement ( locator ). click (); System . out . println ( \u201c Clicked webelement at : \u201c + locator ); } catch ( RuntimeException e ) { System . out . println ( e ); WaitMilliSeconds ( 500 ); if ( Boolean . FALSE . equals ( driver . findElement ( locator ). isEnabled ())) throw new NoSuchElementException ( \u201c Elment not found at locator : \u201c + locator ); driver . findElement ( locator ). click (); } } GOOD public void click (){ WebElement element = this . wait . until ( ExpectedConditions . elementToBeClickable ( this . locator )); element . click (); }","title":"Click elements"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#send-keys","text":"BAD public void SendKeys ( String text ){ wait = ( new WebDriverWait ( driver , 4 )); try { wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); driver . findElement ( locator ). sendKeys ( text ); System . out . println ( \u201c Entered sendKey text : \u201c + text ); //SendKeyEnter(); System . out . println ( \u201c Click Enter \u201d ); WaitMilliSeconds ( 1000 ); } catch ( RuntimeException e ) { System . out . println ( \u201c\\ nSecond attempt to SendKey text : \u201d + text ); Wait (); driver . findElement ( locator ). sendKeys ( text ); SendKeyEnter (); } } GOOD public void sendKeys ( String text ){ WebElement element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); element . sendKeys ( text ); }","title":"Send keys"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#wait-until-web-element-is-clickable","text":"BAD public void WaitUntilWebElementClickable (){ try { wait . until ( ExpectedConditions . elementToBeClickable ( locator )); } catch ( RuntimeException e ) { WaitMilliSeconds ( 2000 ); driver . navigate (). refresh (); System . out . println ( \u201c refresh internally \u2026\u201d ); wait . until ( ExpectedConditions . elementToBeClickable ( driver . findElement ( locator ))); } } GOOD public void waitUntilElementClickable (){ wait . until ( ExpectedConditions . elementToBeClickable ( locator )); }","title":"Wait until web element is clickable"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#get-text","text":"BAD public String getText () { try { wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); return driver . findElement ( locator ). getText (). toString (). trim (); } catch ( RuntimeException e ){ System . out . println ( \u201c getText () exception : \u201c + e ); return \u201c\u201d ; } } GOOD public String getText () { WebElement element = wait . until ( ExpectedConditions . visibilityOfElementLocated ( locator )); return element . getText (). trim (); }","title":"Get text"},{"location":"pages/qa-box/qa_coding_guidelines_advanced/#07-useful-links","text":"Docstring Conventions Cypress Best Practice Selenium Best Practice Selenium Best Practice - TestProjectIO Software Testing Guidelines","title":"07. Useful Links"},{"location":"pages/qa-box/qa_expert/","text":"[QA Box] QA Expert \"All Humans are testers\" - James Bach Level of learning Level 0: \u201cI overcome obliviousness\u201d - I now realize there is something here to learn Level 1: \u201cI overcome intimidation\u201d - I feel I can learn this subject or skill. I knew enough about it so that I am not intimidated by people who knew more than me Level 2: \u201cI overcome incoherence\u201d - I no longer feel that I\u2019m pretending or hand-waving. I feel reasonably competent to discuss or practice. What I say sounds like I think I know Level 3: \u201cI overcome competence\u201d - Now I feel productively self-critical, rather than complacently good enough. I want to take the risk, invent, teach, and push myself. I want to be with other enthusiastic people. Are You A Testing Expert Analyze this claims: You should write a test plan It\u2019s important that testing can be repeatable Fach test case should have an expected results Test automation save money and time God enough quality is not good enough An undocumented test cannot be improved Exploratory testing is a useful practice It\u2019s better to use term \u201cdefect\u201d than \u2018Bug\u201d Ambiguity. should be removed from requirements Experts vs. Non-Experts Non-Experts are more likely to say: \"Yes, thats what the book say.\" \"That is right\" \"That is wrong\" \"I don\u2019t know\" Experts are more likely to say: \"Tell me more about the content? \"I can think of how that might be true and I can think of how it might be false. Let\u2019s think it through\" \"Let me refresh that\" \"Here\u2019s some possible answers\" \"Here\u2019s one way I\u2019ve solved this\" \"I don\u2019t know. Here\u2019s how I will find out.\" Perfect Testing The infinite process of comparing the invisible to the ambiguous so as to avoid the unthinkable happening to the anonymous. In other words, perfect testing is a challenge. Testing is a complex problem-solving activity. Learning testing on your own doesn\u2019t cost you much, you don\u2019t need anyone\u2019s permission. However, it\u2019s hard to know if you are doing it well. Good testing varies a lot with the context. Context-Driven Testing Community Principles The value of any practice depends on its context. There are good practices in context, but there are no best practices. People, working together, are the most important part of the any project\u2019s context. Project unfold over time in ways that are often not predictable The product is solution. If the problem isn\u2019t solved, the product doesn\u2019t work. Good software testing is a challenging intellectual process. Only through judgement and skills, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our product. Some Cool Things That Experts Have And Do Experts have: Situational awareness Confidence in confusion Colleague network Trained reflexes Awareness of limitations Diverse (different) experiences Relevant knowledge Mental models for problem solving (Schemata) Reputation Experts do: Avoid traps and dead ends Systematic inquiry Comfort authority and convention Self-training and retraining Self-criticism Pattern matching on experience Coherent methodology Write, speak, teach Situational awareness How to ask questions What kind of project situation are we in? How much time do we have? Who is involved? Who\u2019s on the test team? What kind of deliverable does it have to be? Who\u2019s our customer What information do I have on my desk right now about this problem What informations is available via the various electronic mechanisms Confidence in confusion If I\u2019m confused, I\u2019m confident Colleague network Colleague: I\u2019m not good at all kind of testing. So I call colleague, he/she knows better than I, and he/she will transfer that skill to me Personal Vision Of Testing Expertise I can test anything under any conditions in any time frame I deliver useful results in a usable form I perform at least as well as any other expert would I choose methods that fit the situation I can explain and defend my work on demand I collaborate effectively with the project team I make appropriate use of available tools and resources I advise clients about the risks and limitations of my work I advise clients about how they can help me to do better work I faithfully and ethically serve my clients Rapid Testing Is a mind-set and a skill-set of testing focused on how to do testing more quickly, less expensively, with excellent results. This is general testing methodology. It\u2019s adapts to any kind of project or product. Definition of Rapid Software Testing Evaluate by learning through experiencing, exploring, end experimenting including questioning, modelling, observation, inference, study, etc. Thomas Gray was musing about innocence as he watched school boys playing in a yard. He was thinking, \u201cDon\u2019t break the spell. Let them be blissfully happy kids.\u201d. We, however, are not children. We should not wait until we are sure there is trouble. We must have faith in trouble; assume there is trouble until we can prove there isn\u2019t. This helps us in our projects, in our testing, and it helps keep our families safe. Invest In Testability The success of any tooling strategy depends in large part on how well your technology affords interactions with tools. This is why it pays to build testability into your products. From a tool perspective this means two big things: that your product is controllable by tools via easily scripted interfaces, and that its states and outputs are observable by those tools. For this reason, browser based products tend to be more testable while apps on mobile devices are less testable. Products with standard controls are more testable than products with custom controls. Consider making testability review a part of each iteration, and otherwise install this thought process early in your projects. Any serious attempt to make tooling work must go hand-in-hand with testable engineering.","title":"QA Expert"},{"location":"pages/qa-box/qa_expert/#qa-box-qa-expert","text":"\"All Humans are testers\" - James Bach","title":"[QA Box] QA Expert"},{"location":"pages/qa-box/qa_expert/#level-of-learning","text":"Level 0: \u201cI overcome obliviousness\u201d - I now realize there is something here to learn Level 1: \u201cI overcome intimidation\u201d - I feel I can learn this subject or skill. I knew enough about it so that I am not intimidated by people who knew more than me Level 2: \u201cI overcome incoherence\u201d - I no longer feel that I\u2019m pretending or hand-waving. I feel reasonably competent to discuss or practice. What I say sounds like I think I know Level 3: \u201cI overcome competence\u201d - Now I feel productively self-critical, rather than complacently good enough. I want to take the risk, invent, teach, and push myself. I want to be with other enthusiastic people.","title":"Level of learning"},{"location":"pages/qa-box/qa_expert/#are-you-a-testing-expert","text":"Analyze this claims: You should write a test plan It\u2019s important that testing can be repeatable Fach test case should have an expected results Test automation save money and time God enough quality is not good enough An undocumented test cannot be improved Exploratory testing is a useful practice It\u2019s better to use term \u201cdefect\u201d than \u2018Bug\u201d Ambiguity. should be removed from requirements","title":"Are You A Testing Expert"},{"location":"pages/qa-box/qa_expert/#experts-vs-non-experts","text":"Non-Experts are more likely to say: \"Yes, thats what the book say.\" \"That is right\" \"That is wrong\" \"I don\u2019t know\" Experts are more likely to say: \"Tell me more about the content? \"I can think of how that might be true and I can think of how it might be false. Let\u2019s think it through\" \"Let me refresh that\" \"Here\u2019s some possible answers\" \"Here\u2019s one way I\u2019ve solved this\" \"I don\u2019t know. Here\u2019s how I will find out.\"","title":"Experts vs. Non-Experts"},{"location":"pages/qa-box/qa_expert/#perfect-testing","text":"The infinite process of comparing the invisible to the ambiguous so as to avoid the unthinkable happening to the anonymous. In other words, perfect testing is a challenge. Testing is a complex problem-solving activity. Learning testing on your own doesn\u2019t cost you much, you don\u2019t need anyone\u2019s permission. However, it\u2019s hard to know if you are doing it well. Good testing varies a lot with the context.","title":"Perfect Testing"},{"location":"pages/qa-box/qa_expert/#context-driven-testing-community-principles","text":"The value of any practice depends on its context. There are good practices in context, but there are no best practices. People, working together, are the most important part of the any project\u2019s context. Project unfold over time in ways that are often not predictable The product is solution. If the problem isn\u2019t solved, the product doesn\u2019t work. Good software testing is a challenging intellectual process. Only through judgement and skills, exercised cooperatively throughout the entire project, are we able to do the right things at the right times to effectively test our product.","title":"Context-Driven Testing Community Principles"},{"location":"pages/qa-box/qa_expert/#some-cool-things-that-experts-have-and-do","text":"Experts have: Situational awareness Confidence in confusion Colleague network Trained reflexes Awareness of limitations Diverse (different) experiences Relevant knowledge Mental models for problem solving (Schemata) Reputation Experts do: Avoid traps and dead ends Systematic inquiry Comfort authority and convention Self-training and retraining Self-criticism Pattern matching on experience Coherent methodology Write, speak, teach","title":"Some Cool Things That Experts Have And Do"},{"location":"pages/qa-box/qa_expert/#situational-awareness","text":"How to ask questions What kind of project situation are we in? How much time do we have? Who is involved? Who\u2019s on the test team? What kind of deliverable does it have to be? Who\u2019s our customer What information do I have on my desk right now about this problem What informations is available via the various electronic mechanisms","title":"Situational awareness"},{"location":"pages/qa-box/qa_expert/#confidence-in-confusion","text":"If I\u2019m confused, I\u2019m confident","title":"Confidence in confusion"},{"location":"pages/qa-box/qa_expert/#colleague-network","text":"Colleague: I\u2019m not good at all kind of testing. So I call colleague, he/she knows better than I, and he/she will transfer that skill to me","title":"Colleague network"},{"location":"pages/qa-box/qa_expert/#personal-vision-of-testing-expertise","text":"I can test anything under any conditions in any time frame I deliver useful results in a usable form I perform at least as well as any other expert would I choose methods that fit the situation I can explain and defend my work on demand I collaborate effectively with the project team I make appropriate use of available tools and resources I advise clients about the risks and limitations of my work I advise clients about how they can help me to do better work I faithfully and ethically serve my clients","title":"Personal Vision Of Testing Expertise"},{"location":"pages/qa-box/qa_expert/#rapid-testing","text":"Is a mind-set and a skill-set of testing focused on how to do testing more quickly, less expensively, with excellent results. This is general testing methodology. It\u2019s adapts to any kind of project or product.","title":"Rapid Testing"},{"location":"pages/qa-box/qa_expert/#definition-of-rapid-software-testing","text":"Evaluate by learning through experiencing, exploring, end experimenting including questioning, modelling, observation, inference, study, etc. Thomas Gray was musing about innocence as he watched school boys playing in a yard. He was thinking, \u201cDon\u2019t break the spell. Let them be blissfully happy kids.\u201d. We, however, are not children. We should not wait until we are sure there is trouble. We must have faith in trouble; assume there is trouble until we can prove there isn\u2019t. This helps us in our projects, in our testing, and it helps keep our families safe.","title":"Definition of Rapid Software Testing"},{"location":"pages/qa-box/qa_expert/#invest-in-testability","text":"The success of any tooling strategy depends in large part on how well your technology affords interactions with tools. This is why it pays to build testability into your products. From a tool perspective this means two big things: that your product is controllable by tools via easily scripted interfaces, and that its states and outputs are observable by those tools. For this reason, browser based products tend to be more testable while apps on mobile devices are less testable. Products with standard controls are more testable than products with custom controls. Consider making testability review a part of each iteration, and otherwise install this thought process early in your projects. Any serious attempt to make tooling work must go hand-in-hand with testable engineering.","title":"Invest In Testability"},{"location":"pages/qa-box/qa_good_practice/","text":"[QA Box] Good Automation Practice There are a lot of reasons test automation is beneficial, and by adhering to automated testing best practices you can ensure that your testing strateagy delivers the maximum return on investment (ROI). Automated testing will shorten your development cycles, avoid cumbersome repetitive tasks and help improve software quality but how do you get started? These best practices a successful foundation to start improving your software quality. Thorough testing is crucial to the success of a software product. If your software doesn\u2019t work properly, chances are strong that most people won\u2019t buy or use it\u2026at least not for long. But testing to find defects \u2013 or bugs \u2013 is time-consuming, expensive, often repetitive, and subject to human error. Automated testing, in which Quality Assurance teams use software tools to run detailed, repetitive, and data-intensive tests automatically, helps teams improve software quality and make the most of their always-limited testing resources. Test automation tools help teams test faster, allows them to test substantially more code, improves test accuracy, and frees up QA engineers so they can focus on tests that require manual attention and their unique human skills. Use these top tips to ensure that your software testing is successful and you get the maximum return on investment (ROI): Decide what Test Cases to Automate Repetitive tests that run for multiple builds Tests that tend to cause human error Tests that require multiple data sets. Frequently used functionality that introduces high risk conditions. Tests that are impossible to perform manually. Tests that run on several different hardware or software platforms and configurations. Tests that take a lot of effort and time when manual testing. Success in test automation recipe Careful plan and design work Creating an automation plan (initial set of tests to automate) Define your goal for automated testing Determine which types of tests to automate: Each types of testing has its place in the testing process. Decide what actions your automated tests will perform. Divide your tests into several logical, smaller tests Test the functionality of your application as you add it, rather than waiting until the whole feature is implemented. When creating tests, try to keep them small and focused on one objective Once you create several simple automated tests, you can group your tests into one, larger automated test. You can organize automated tests by the application\u2019s functional area, major/minor division in the application, common functions or a base set of test data. If an automated test refers to other tests, you may need to create a test tree, where you can run tests in a specific order. Select the Right Automated Testing Tool There are a lot of automated testing tools on the market, and it is important to choose the automated testing tool that best suits your overall requirements. Consider these key points when selecting an automated testing tool: Support for your platforms and technology. Are you testing .Net, C# or WPF applications and on what operating systems? Are you going to test web applications? Do you need support for mobile application testing? Do you work with Android or iOS, or do you work with both operating systems? Flexibility for testers of all skill levels. Feature rich but also easy to create automated tests. Does the automated testing tool support record-and-playback test creation as well as manual creation of automated tests; does it include features for implementing checkpoints to verify values, databases, or key functionality of your application? Create automated tests that are reusable, maintainable and resistant to changes in the applications UI. Will my automated tests break if my UI changes? Integrate with your existing ecosystem. Does your tool integrate with your CI/CD pipeline such as Jenkins or Azure DevOps? Or your test management framework such as Zephyr? What about a defect-management system like Jira, or a source control such as Git? Divide your Automated Testing Efforts It is important to identify the level of experience and skills for each of your team members and divide your automated testing efforts accordingly. In order to perform writing automated test scripts, you should have QA engineers that know the script language provided by the automated testing tool. Some team members may not be versed in writing automated test scripts. These QA engineers may be better at writing test cases. Consider using keyword-driven testing. Keyword tests are often seen as an alternative to automated test scripts. Unlike scripts, they can be easily used by technical and non-technical users and allow users of all levels to create robust and powerful automated tests. You should also collaborate on your automated testing project with other QA engineers in your department. Testing performed by a team is more effective for finding defects and the right automated testing tool allows you to share your projects with several testers. Create Good, Quality Test Data The data that should be entered into input fields during an automated test is usually stored in an external file. This data might be read from a database or any other data source like text or XML files, Excel sheets, and database tables. A good automated testing tool actually understands the contents of the data files and iterates over the contents in the automated test. Using external data makes your automated tests reusable and easier to maintain. To add different testing scenarios, the data files can be easily extended with new data without needing to edit the actual automated test. Invest time and effort into creating data that is well structured. The earlier you create good-quality data, the easier it is to extend existing automated tests along with the application's development. Create Automated Tests that are Resistant to Changes in the UI The user interface of the application may change between builds, especially in the early stages. These changes may affect the test results, or your automated tests may no longer work with future versions of the application. Provide unique names for your controls, it makes your automated tests resistant to these UI changes and ensures that your automated tests work without having to make changes to the test itself. Keep Test Records In a Bug Database Using a bug database is a best practice whether a team uses test automation or not. Whenever new bugs are found by the automation tool or by the testers, they should be recorded in a bug tracking tool with the exact steps to reproduce the bugs and other details. Conclusion Adapting these recommended best practices can help you avoid common mistakes and improve your automated testing process. This helps you test faster, save money and get your products released on time.","title":"Automation Good Practice"},{"location":"pages/qa-box/qa_good_practice/#qa-box-good-automation-practice","text":"There are a lot of reasons test automation is beneficial, and by adhering to automated testing best practices you can ensure that your testing strateagy delivers the maximum return on investment (ROI). Automated testing will shorten your development cycles, avoid cumbersome repetitive tasks and help improve software quality but how do you get started? These best practices a successful foundation to start improving your software quality. Thorough testing is crucial to the success of a software product. If your software doesn\u2019t work properly, chances are strong that most people won\u2019t buy or use it\u2026at least not for long. But testing to find defects \u2013 or bugs \u2013 is time-consuming, expensive, often repetitive, and subject to human error. Automated testing, in which Quality Assurance teams use software tools to run detailed, repetitive, and data-intensive tests automatically, helps teams improve software quality and make the most of their always-limited testing resources. Test automation tools help teams test faster, allows them to test substantially more code, improves test accuracy, and frees up QA engineers so they can focus on tests that require manual attention and their unique human skills. Use these top tips to ensure that your software testing is successful and you get the maximum return on investment (ROI):","title":"[QA Box] Good Automation Practice"},{"location":"pages/qa-box/qa_good_practice/#decide-what-test-cases-to-automate","text":"Repetitive tests that run for multiple builds Tests that tend to cause human error Tests that require multiple data sets. Frequently used functionality that introduces high risk conditions. Tests that are impossible to perform manually. Tests that run on several different hardware or software platforms and configurations. Tests that take a lot of effort and time when manual testing.","title":"Decide what Test Cases to Automate"},{"location":"pages/qa-box/qa_good_practice/#success-in-test-automation-recipe","text":"Careful plan and design work Creating an automation plan (initial set of tests to automate) Define your goal for automated testing Determine which types of tests to automate: Each types of testing has its place in the testing process. Decide what actions your automated tests will perform. Divide your tests into several logical, smaller tests Test the functionality of your application as you add it, rather than waiting until the whole feature is implemented. When creating tests, try to keep them small and focused on one objective Once you create several simple automated tests, you can group your tests into one, larger automated test. You can organize automated tests by the application\u2019s functional area, major/minor division in the application, common functions or a base set of test data. If an automated test refers to other tests, you may need to create a test tree, where you can run tests in a specific order.","title":"Success in test automation recipe"},{"location":"pages/qa-box/qa_good_practice/#select-the-right-automated-testing-tool","text":"There are a lot of automated testing tools on the market, and it is important to choose the automated testing tool that best suits your overall requirements. Consider these key points when selecting an automated testing tool: Support for your platforms and technology. Are you testing .Net, C# or WPF applications and on what operating systems? Are you going to test web applications? Do you need support for mobile application testing? Do you work with Android or iOS, or do you work with both operating systems? Flexibility for testers of all skill levels. Feature rich but also easy to create automated tests. Does the automated testing tool support record-and-playback test creation as well as manual creation of automated tests; does it include features for implementing checkpoints to verify values, databases, or key functionality of your application? Create automated tests that are reusable, maintainable and resistant to changes in the applications UI. Will my automated tests break if my UI changes? Integrate with your existing ecosystem. Does your tool integrate with your CI/CD pipeline such as Jenkins or Azure DevOps? Or your test management framework such as Zephyr? What about a defect-management system like Jira, or a source control such as Git?","title":"Select the Right Automated Testing Tool"},{"location":"pages/qa-box/qa_good_practice/#divide-your-automated-testing-efforts","text":"It is important to identify the level of experience and skills for each of your team members and divide your automated testing efforts accordingly. In order to perform writing automated test scripts, you should have QA engineers that know the script language provided by the automated testing tool. Some team members may not be versed in writing automated test scripts. These QA engineers may be better at writing test cases. Consider using keyword-driven testing. Keyword tests are often seen as an alternative to automated test scripts. Unlike scripts, they can be easily used by technical and non-technical users and allow users of all levels to create robust and powerful automated tests. You should also collaborate on your automated testing project with other QA engineers in your department. Testing performed by a team is more effective for finding defects and the right automated testing tool allows you to share your projects with several testers.","title":"Divide your Automated Testing Efforts"},{"location":"pages/qa-box/qa_good_practice/#create-good-quality-test-data","text":"The data that should be entered into input fields during an automated test is usually stored in an external file. This data might be read from a database or any other data source like text or XML files, Excel sheets, and database tables. A good automated testing tool actually understands the contents of the data files and iterates over the contents in the automated test. Using external data makes your automated tests reusable and easier to maintain. To add different testing scenarios, the data files can be easily extended with new data without needing to edit the actual automated test. Invest time and effort into creating data that is well structured. The earlier you create good-quality data, the easier it is to extend existing automated tests along with the application's development.","title":"Create Good, Quality Test Data"},{"location":"pages/qa-box/qa_good_practice/#create-automated-tests-that-are-resistant-to-changes-in-the-ui","text":"The user interface of the application may change between builds, especially in the early stages. These changes may affect the test results, or your automated tests may no longer work with future versions of the application. Provide unique names for your controls, it makes your automated tests resistant to these UI changes and ensures that your automated tests work without having to make changes to the test itself.","title":"Create Automated Tests that are Resistant to Changes in the UI"},{"location":"pages/qa-box/qa_good_practice/#keep-test-records-in-a-bug-database","text":"Using a bug database is a best practice whether a team uses test automation or not. Whenever new bugs are found by the automation tool or by the testers, they should be recorded in a bug tracking tool with the exact steps to reproduce the bugs and other details.","title":"Keep Test Records In a Bug Database"},{"location":"pages/qa-box/qa_good_practice/#conclusion","text":"Adapting these recommended best practices can help you avoid common mistakes and improve your automated testing process. This helps you test faster, save money and get your products released on time.","title":"Conclusion"},{"location":"pages/qa-box/qa_skills/","text":"[QA Box] QA Skills Knowledge, workflows & skills Bug reporting and bug tracking require a specific set of skills which are quite different from those needed in other areas such as design or development. The reason QA requires a special kind of profile is that it\u2019s the one part that sits right in the middle of the software development matrix, working with and among developers, designers, product managers, users & clients. If you think about the role of QA and bug reporting, you can think of a middle man. The middle man is the one in touch with alpha and beta testers and customers. People in QA and testing are the ones that have to tell the web developer to change (fix) their code. And when the situation calls for it, they are also the ones to tell the web designers that their design isn\u2019t intuitive enough for the end users. They communicate with the product team and make sure they are on track to fix the existing bugs. All these people have different agendas and it is up to the QA agent to make sure that everyone is aligned and knows what needs to be done. QA testers need to speak more than one language. They basically have to understand the workings behind the entire product (to some extent). 01. Tech skills As a tester, you are hired to press certain software or products hard. You\u2019re the one who\u2019s following every little step, every little hint. You\u2019re chasing down bugs. You\u2019re Horatio Caine 02. Good at communication When a QA finally has some information, he or she has to be willing to ask developers questions when questions need to be asked. 03. Diplomatic Looking for other people\u2019s mistakes and bringing them to light is always a tough thing to do. Doing it as a tester or bug reporter means that you must be able to work together with these people in an efficient manner. It also means being able to get the job done even if it means having to deal with a bit of resistance and crankiness here and there. No one likes bugs and no one likes them to be found. Establishing an open-minded culture of trial & error is absolutely key here. It doesn\u2019t help to point fingers at your developers for certain bugs or mistakes. It simply doesn\u2019t work. 04. Negotiator In order to get things done in a reasonable time, negotiation skills are crucial. Here\u2019s why. The development team is busy with their development work, so they\u2019ll have to make time to fix bugs. That means there will be a whole lot of back and forth between QA and development on when and what should be done. This is less the case with small issues but can be an important factor with larger issues. 05. Good at testing This is your thing. You absolutely need to be good at testing. Having a good understanding of different testing concepts, workflows, tools, and techniques are a must-have. If you don\u2019t have that, you\u2019re not the right person for this role. 06. Deep diver When you\u2019re dealing with bugs, thinking you understand the issue is never as good as really understanding what\u2019s happening. If you don\u2019t, your instructions are bound to be vague and will, without a doubt, result in an increase of the costs. To have a certain level of curiosity. As a bug reporter, you spent a lot of time on the product itself and you\u2019re learning the ins and outs of the product. Be prepared to dive deep into your product and its technological basis. 07. Understand your product from your end-users perspective The software has to fulfill a certain function. Understanding the product requirements and how they help the users is key to being able to communicate well with everyone. It\u2019s especially key to be able to communicate with the end user. QA has to understand how the product works from an end user\u2019s point of view and what he or she was trying to do. It will also help in distinguishing the critical issues from the not-so-critical ones. The QA unicorn Technogogy skills Domain expertise Communication and business skills Domain expertise In today's fast paced tech landscape, companies seek out teams with specialized, domain-specific knowledge when working with a QA partner. Whether your product serves the legal, financial, CRM, social media, healthcare, or manufacturing space, having a team that knows the intricacies of your domain ensures that your users are satisfied. Rich domain knowledge is valuable for many reasons, but here are the top 5 as listed by our expert QA engineers: It helps your team speak the language If there is an error in a particular transaction process in a financial application, the engineer will be able to accurately describe the problem and its impact on the product as a whole. It puts your team in the user's shoes Domain knowledge makes it easier for a QA engineer to view the product through the eyes of the user. This means that defects in the graphical user interface (GUI) will be uncovered in the initial stage of testing instead of later, when the product is nearing release or is already delivered to customers. It boosts the productivity of your team QA engineers with extensive domain knowledge are in high demand because their experience allows them to go far beyond the discovery of a bug \u2013 they can suggest and implement solutions. Conversely, an engineer with only technical skills would have to relay the issue to someone else, wasting both time and budget. It tells the team where to look for defects The processing structure and architecture of a product appear clearly to a QA engineer with previous experience in the domain, resulting in more thorough testing and the ability to look for common yet easily missed defects. Specific data sets and code are more quickly understood and validated when the engineer has worked with them before. It helps teams prioritize bugs If the engineer has worked in the domain before, they will know how to categorize bugs more efficiently. By prioritizing bugs that are critical to the system's functionality, the engineer effectively manages time and cost while also improving and refining the product.","title":"Automation Skills"},{"location":"pages/qa-box/qa_skills/#qa-box-qa-skills","text":"","title":"[QA Box] QA Skills"},{"location":"pages/qa-box/qa_skills/#knowledge-workflows-skills","text":"Bug reporting and bug tracking require a specific set of skills which are quite different from those needed in other areas such as design or development. The reason QA requires a special kind of profile is that it\u2019s the one part that sits right in the middle of the software development matrix, working with and among developers, designers, product managers, users & clients. If you think about the role of QA and bug reporting, you can think of a middle man. The middle man is the one in touch with alpha and beta testers and customers. People in QA and testing are the ones that have to tell the web developer to change (fix) their code. And when the situation calls for it, they are also the ones to tell the web designers that their design isn\u2019t intuitive enough for the end users. They communicate with the product team and make sure they are on track to fix the existing bugs. All these people have different agendas and it is up to the QA agent to make sure that everyone is aligned and knows what needs to be done. QA testers need to speak more than one language. They basically have to understand the workings behind the entire product (to some extent).","title":"Knowledge, workflows &amp; skills"},{"location":"pages/qa-box/qa_skills/#01-tech-skills","text":"As a tester, you are hired to press certain software or products hard. You\u2019re the one who\u2019s following every little step, every little hint. You\u2019re chasing down bugs. You\u2019re Horatio Caine","title":"01. Tech skills"},{"location":"pages/qa-box/qa_skills/#02-good-at-communication","text":"When a QA finally has some information, he or she has to be willing to ask developers questions when questions need to be asked.","title":"02. Good at communication"},{"location":"pages/qa-box/qa_skills/#03-diplomatic","text":"Looking for other people\u2019s mistakes and bringing them to light is always a tough thing to do. Doing it as a tester or bug reporter means that you must be able to work together with these people in an efficient manner. It also means being able to get the job done even if it means having to deal with a bit of resistance and crankiness here and there. No one likes bugs and no one likes them to be found. Establishing an open-minded culture of trial & error is absolutely key here. It doesn\u2019t help to point fingers at your developers for certain bugs or mistakes. It simply doesn\u2019t work.","title":"03. Diplomatic"},{"location":"pages/qa-box/qa_skills/#04-negotiator","text":"In order to get things done in a reasonable time, negotiation skills are crucial. Here\u2019s why. The development team is busy with their development work, so they\u2019ll have to make time to fix bugs. That means there will be a whole lot of back and forth between QA and development on when and what should be done. This is less the case with small issues but can be an important factor with larger issues.","title":"04. Negotiator"},{"location":"pages/qa-box/qa_skills/#05-good-at-testing","text":"This is your thing. You absolutely need to be good at testing. Having a good understanding of different testing concepts, workflows, tools, and techniques are a must-have. If you don\u2019t have that, you\u2019re not the right person for this role.","title":"05. Good at testing"},{"location":"pages/qa-box/qa_skills/#06-deep-diver","text":"When you\u2019re dealing with bugs, thinking you understand the issue is never as good as really understanding what\u2019s happening. If you don\u2019t, your instructions are bound to be vague and will, without a doubt, result in an increase of the costs. To have a certain level of curiosity. As a bug reporter, you spent a lot of time on the product itself and you\u2019re learning the ins and outs of the product. Be prepared to dive deep into your product and its technological basis.","title":"06. Deep diver"},{"location":"pages/qa-box/qa_skills/#07-understand-your-product-from-your-end-users-perspective","text":"The software has to fulfill a certain function. Understanding the product requirements and how they help the users is key to being able to communicate well with everyone. It\u2019s especially key to be able to communicate with the end user. QA has to understand how the product works from an end user\u2019s point of view and what he or she was trying to do. It will also help in distinguishing the critical issues from the not-so-critical ones.","title":"07. Understand your product from your end-users perspective"},{"location":"pages/qa-box/qa_skills/#the-qa-unicorn","text":"Technogogy skills Domain expertise Communication and business skills","title":"The QA unicorn"},{"location":"pages/qa-box/qa_skills/#domain-expertise","text":"In today's fast paced tech landscape, companies seek out teams with specialized, domain-specific knowledge when working with a QA partner. Whether your product serves the legal, financial, CRM, social media, healthcare, or manufacturing space, having a team that knows the intricacies of your domain ensures that your users are satisfied. Rich domain knowledge is valuable for many reasons, but here are the top 5 as listed by our expert QA engineers: It helps your team speak the language If there is an error in a particular transaction process in a financial application, the engineer will be able to accurately describe the problem and its impact on the product as a whole. It puts your team in the user's shoes Domain knowledge makes it easier for a QA engineer to view the product through the eyes of the user. This means that defects in the graphical user interface (GUI) will be uncovered in the initial stage of testing instead of later, when the product is nearing release or is already delivered to customers. It boosts the productivity of your team QA engineers with extensive domain knowledge are in high demand because their experience allows them to go far beyond the discovery of a bug \u2013 they can suggest and implement solutions. Conversely, an engineer with only technical skills would have to relay the issue to someone else, wasting both time and budget. It tells the team where to look for defects The processing structure and architecture of a product appear clearly to a QA engineer with previous experience in the domain, resulting in more thorough testing and the ability to look for common yet easily missed defects. Specific data sets and code are more quickly understood and validated when the engineer has worked with them before. It helps teams prioritize bugs If the engineer has worked in the domain before, they will know how to categorize bugs more efficiently. By prioritizing bugs that are critical to the system's functionality, the engineer effectively manages time and cost while also improving and refining the product.","title":"Domain expertise"},{"location":"pages/qa-box/qa_terms/","text":"[QA Box] Terms in Testing Testing and Debbuging Testing : It involves identifying bug/error/defect in a software without correcting it. Normally professionals with a quality assurance background are involved in bugs identification. Testing is performed in the testing phase. Debugging : It involves identifying, isolating, and fixing the problems/bugs. Developers who code the software conduct debugging upon encountering an error in the code. Debugging is a part of White Box Testing or Unit Testing. Debugging can be performed in the development phase while conducting Unit Testing or in phases while fixing the reported bugs.","title":"QA Terms"},{"location":"pages/qa-box/qa_terms/#qa-box-terms-in-testing","text":"","title":"[QA Box] Terms in Testing"},{"location":"pages/qa-box/qa_terms/#testing-and-debbuging","text":"Testing : It involves identifying bug/error/defect in a software without correcting it. Normally professionals with a quality assurance background are involved in bugs identification. Testing is performed in the testing phase. Debugging : It involves identifying, isolating, and fixing the problems/bugs. Developers who code the software conduct debugging upon encountering an error in the code. Debugging is a part of White Box Testing or Unit Testing. Debugging can be performed in the development phase while conducting Unit Testing or in phases while fixing the reported bugs.","title":"Testing and Debbuging"},{"location":"pages/security-qa/spt_csrf/","text":"Cross Site Request Forgery (CSRF) CSRF is being able to force the user to do a specific action on the target website from your website, usually via an HTML form and is rather straightforward to find. < form action = \u201d/login\u201dmethod=\u201dPOST\u201d > An example of a CSRF bug is forcing the user to change their account email to one controlled by you, which would lead to account takeover. Developers can introduce CSRF protection very easily but still some developers opt to create custom code instead. When first hunting for CSRF bugs I look for areas on the website which should contain protection around them, such as updating your account information. I know this sounds a bit silly but from actually proving a certain feature does have security can again give you a clear indication to the security throughout the site. What behavior do you see when sending a blank CSRF value, did it reveal any framework information from an error? Did it reflect your changes but with a CSRF error? Have you seen this parameter name used on other websites? Perhaps there isn\u2019t even any protection! Test their most secure features (account functions usually as mentioned above) and work your way backwards. As you continue testing the website you may discover that some features have different CSRF protection. Now consider, why? Different team? Old codebase? Perhaps a different parameter name is used and now you can hunt specifically for this parameter knowing it\u2019s vulnerable. One common approach developers take is checking the referer header value and if it isn't their website, then drop the request. However this backfires because sometimes the checks are only executed if the referer header is actually found, and if it isn't, no checks done. You can get a blank referrer from the following: < meta name = \"referrer\" content = \"no-referrer\" /> < iframe src = \u201ddata:text/html;base64,form_code_here\u201d > As well as this sometimes they'll only check if their domain is found in the referer, so creating a directory on your site & visiting https://www.yoursite.com/https://www.theirsite.com/ may bypass the checks. Or what about https://www.theirsite.computer/ ? Again, to begin with I am focused purely on finding areas that should contain CSRF protection (sensitive areas!), and then checking if they have created custom filtering. Where there\u2019s a filter there is usually a bypass! When hunting for CSRF there isn\u2019t really a list of \u201ccommon\u201d areas to hunt for as every website contains different features, but typically all sensitive features should be protected from CSRF, so find them and test there. For example if the website allows you to checkout, can you force the user to checkout thus forcing their card to be charged?","title":"CSRF"},{"location":"pages/security-qa/spt_csrf/#cross-site-request-forgery-csrf","text":"CSRF is being able to force the user to do a specific action on the target website from your website, usually via an HTML form and is rather straightforward to find. < form action = \u201d/login\u201dmethod=\u201dPOST\u201d > An example of a CSRF bug is forcing the user to change their account email to one controlled by you, which would lead to account takeover. Developers can introduce CSRF protection very easily but still some developers opt to create custom code instead. When first hunting for CSRF bugs I look for areas on the website which should contain protection around them, such as updating your account information. I know this sounds a bit silly but from actually proving a certain feature does have security can again give you a clear indication to the security throughout the site. What behavior do you see when sending a blank CSRF value, did it reveal any framework information from an error? Did it reflect your changes but with a CSRF error? Have you seen this parameter name used on other websites? Perhaps there isn\u2019t even any protection! Test their most secure features (account functions usually as mentioned above) and work your way backwards. As you continue testing the website you may discover that some features have different CSRF protection. Now consider, why? Different team? Old codebase? Perhaps a different parameter name is used and now you can hunt specifically for this parameter knowing it\u2019s vulnerable. One common approach developers take is checking the referer header value and if it isn't their website, then drop the request. However this backfires because sometimes the checks are only executed if the referer header is actually found, and if it isn't, no checks done. You can get a blank referrer from the following: < meta name = \"referrer\" content = \"no-referrer\" /> < iframe src = \u201ddata:text/html;base64,form_code_here\u201d > As well as this sometimes they'll only check if their domain is found in the referer, so creating a directory on your site & visiting https://www.yoursite.com/https://www.theirsite.com/ may bypass the checks. Or what about https://www.theirsite.computer/ ? Again, to begin with I am focused purely on finding areas that should contain CSRF protection (sensitive areas!), and then checking if they have created custom filtering. Where there\u2019s a filter there is usually a bypass! When hunting for CSRF there isn\u2019t really a list of \u201ccommon\u201d areas to hunt for as every website contains different features, but typically all sensitive features should be protected from CSRF, so find them and test there. For example if the website allows you to checkout, can you force the user to checkout thus forcing their card to be charged?","title":"Cross Site Request Forgery (CSRF)"},{"location":"pages/security-qa/spt_idor/","text":"Insecure Direct Object References When a web server processes a user\u2019s request, it determines the resource accessed using parameters stated within the HTTP request. The direct object reference is information that is used to locate and access a particular resource. While the server is retrieving a resource, attackers can manipulate these parameters and access internal implementation object details in the event of a lack of adequate server-side validation. This attack is known as an Insecure Direct Object Reference (IDOR) vulnerability. Insecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability, attackers can bypass authorization and access resources in the system directly, for example, database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more. This is caused by the fact that the application takes user-supplied input and uses it to retrieve an object without performing sufficient authorization checks. What is Insecure Direct Object Reference An Insecure Direct Object Reference flaw occurs when the server fails to validate incoming HTTP requests to access objects. Since the application cannot determine the authenticity of the user trying to access an object, it reveals the underlying object details to the attackers. Attackers thereby gain unauthorized access to the object and modify the value of the ID parameter for the object to fulfill their adversary acts. As a result, users can be redirected to access harmful pages without their knowledge. In the worst case, users\u2019 sensitive personal and financial details can also be compromised. The Insecure Direct Object References vulnerability arises as a consequence of three security gaps: A client can alter user-supplied input such as a form or URL parameter values to modify an object reference The web server exposes a direct reference to an internal operation or object The application lacks sufficient authorization checks for access to internal objects Since object references expose data of the application\u2019s internal implementation details, the consequences of the attack can be severe. Some impacts of a successful IDOR attack include: Unauthorized access to sensitive data \u2013 Object references often include database IDs, which attackers can access to expose sensitive information about the application/users. The unauthorized user can also use database entries to prepare malicious SQL payloads for further attacks. Object manipulation \u2013 With access to internal references, attackers gain direct access to the data and state of the application. Attackers can then manipulate the exposed objects to modify data, access hidden functions, or further escalate privileges. Direct file access \u2013 Malicious users can combine IDOR attacks with directory transversal attack techniques to manipulate the host\u2019s file system. This grants them the ability to upload/download files freely and manipulate content accessed by other users. Types of IDOR Attack There are several ways through which hackers can orchestrate an IDOR attack. These include: Body Manipulation In this type of IDOR attack, the adversary accesses information from other users by modifying the value of checkboxes, API endpoints, radio buttons, and input form fields. URL Tampering Attacks The attacker alters HTTP request parameters by modifying URL parameters on the client-side. The URL tampering attack targets the GET and POST parameters since they are generally vulnerable to pollution of a URL parameter. JSON ID Manipulation JSON is a popular framework for data exchange between different host machines. The framework mainly sends data between a web server and web applications. An attacker may intercept JSON data sent between APIs, servers, and the web application to gain unauthorized access to application configuration and data. Mass Assignment Attackers manipulate a record pattern to modify large data sets that they are not authorized to access. IDOR Examples direct reference to database objects Consider a website that uses the following URL to access the customer account page, by retrieving information from the back-end database: https://insecure-website.com/customer_account?customer_number=132355 Here, the customer number is used directly as a record index in queries that are performed on the back-end database. If no other controls are in place, an attacker can simply modify the customer_number value, bypassing access controls to view the records of other customers. This is an example of an IDOR vulnerability leading to horizontal privilege escalation. An attacker might be able to perform horizontal and vertical privilege escalation by altering the user to one with additional privileges while bypassing access controls. Other possibilities include exploiting password leakage or modifying parameters once the attacker has landed in the user's accounts page, for example. IDOR vulnerability with direct reference to static files IDOR vulnerabilities often arise when sensitive resources are located in static files on the server-side filesystem. For example, a website might save chat message transcripts to disk using an incrementing filename, and allow users to retrieve these by visiting a URL like the following: https://insecure-website.com/static/12144.txt In this situation, an attacker can simply modify the filename to retrieve a transcript created by another user and potentially obtain user credentials and other sensitive data.","title":"IDOR"},{"location":"pages/security-qa/spt_idor/#insecure-direct-object-references","text":"When a web server processes a user\u2019s request, it determines the resource accessed using parameters stated within the HTTP request. The direct object reference is information that is used to locate and access a particular resource. While the server is retrieving a resource, attackers can manipulate these parameters and access internal implementation object details in the event of a lack of adequate server-side validation. This attack is known as an Insecure Direct Object Reference (IDOR) vulnerability. Insecure Direct Object References (IDOR) occur when an application provides direct access to objects based on user-supplied input. As a result of this vulnerability, attackers can bypass authorization and access resources in the system directly, for example, database records or files. Insecure Direct Object References allow attackers to bypass authorization and access resources directly by modifying the value of a parameter used to directly point to an object. Such resources can be database entries belonging to other users, files in the system, and more. This is caused by the fact that the application takes user-supplied input and uses it to retrieve an object without performing sufficient authorization checks.","title":"Insecure Direct Object References"},{"location":"pages/security-qa/spt_idor/#what-is-insecure-direct-object-reference","text":"An Insecure Direct Object Reference flaw occurs when the server fails to validate incoming HTTP requests to access objects. Since the application cannot determine the authenticity of the user trying to access an object, it reveals the underlying object details to the attackers. Attackers thereby gain unauthorized access to the object and modify the value of the ID parameter for the object to fulfill their adversary acts. As a result, users can be redirected to access harmful pages without their knowledge. In the worst case, users\u2019 sensitive personal and financial details can also be compromised. The Insecure Direct Object References vulnerability arises as a consequence of three security gaps: A client can alter user-supplied input such as a form or URL parameter values to modify an object reference The web server exposes a direct reference to an internal operation or object The application lacks sufficient authorization checks for access to internal objects Since object references expose data of the application\u2019s internal implementation details, the consequences of the attack can be severe. Some impacts of a successful IDOR attack include: Unauthorized access to sensitive data \u2013 Object references often include database IDs, which attackers can access to expose sensitive information about the application/users. The unauthorized user can also use database entries to prepare malicious SQL payloads for further attacks. Object manipulation \u2013 With access to internal references, attackers gain direct access to the data and state of the application. Attackers can then manipulate the exposed objects to modify data, access hidden functions, or further escalate privileges. Direct file access \u2013 Malicious users can combine IDOR attacks with directory transversal attack techniques to manipulate the host\u2019s file system. This grants them the ability to upload/download files freely and manipulate content accessed by other users.","title":"What is Insecure Direct Object Reference"},{"location":"pages/security-qa/spt_idor/#types-of-idor-attack","text":"There are several ways through which hackers can orchestrate an IDOR attack. These include:","title":"Types of IDOR Attack"},{"location":"pages/security-qa/spt_idor/#body-manipulation","text":"In this type of IDOR attack, the adversary accesses information from other users by modifying the value of checkboxes, API endpoints, radio buttons, and input form fields.","title":"Body Manipulation"},{"location":"pages/security-qa/spt_idor/#url-tampering-attacks","text":"The attacker alters HTTP request parameters by modifying URL parameters on the client-side. The URL tampering attack targets the GET and POST parameters since they are generally vulnerable to pollution of a URL parameter.","title":"URL Tampering Attacks"},{"location":"pages/security-qa/spt_idor/#json-id-manipulation","text":"JSON is a popular framework for data exchange between different host machines. The framework mainly sends data between a web server and web applications. An attacker may intercept JSON data sent between APIs, servers, and the web application to gain unauthorized access to application configuration and data.","title":"JSON ID Manipulation"},{"location":"pages/security-qa/spt_idor/#mass-assignment","text":"Attackers manipulate a record pattern to modify large data sets that they are not authorized to access.","title":"Mass Assignment"},{"location":"pages/security-qa/spt_idor/#idor-examples","text":"","title":"IDOR Examples"},{"location":"pages/security-qa/spt_idor/#direct-reference-to-database-objects","text":"Consider a website that uses the following URL to access the customer account page, by retrieving information from the back-end database: https://insecure-website.com/customer_account?customer_number=132355 Here, the customer number is used directly as a record index in queries that are performed on the back-end database. If no other controls are in place, an attacker can simply modify the customer_number value, bypassing access controls to view the records of other customers. This is an example of an IDOR vulnerability leading to horizontal privilege escalation. An attacker might be able to perform horizontal and vertical privilege escalation by altering the user to one with additional privileges while bypassing access controls. Other possibilities include exploiting password leakage or modifying parameters once the attacker has landed in the user's accounts page, for example.","title":"direct reference to database objects"},{"location":"pages/security-qa/spt_idor/#idor-vulnerability-with-direct-reference-to-static-files","text":"IDOR vulnerabilities often arise when sensitive resources are located in static files on the server-side filesystem. For example, a website might save chat message transcripts to disk using an incrementing filename, and allow users to retrieve these by visiting a URL like the following: https://insecure-website.com/static/12144.txt In this situation, an attacker can simply modify the filename to retrieve a transcript created by another user and potentially obtain user credentials and other sensitive data.","title":"IDOR vulnerability with direct reference to static files"},{"location":"pages/security-qa/spt_penetration_testing/","text":"[Security-QA] Penetration testing Penetration testing is a form of security test where security experts simulate a hack of your systems to uncover and exploit vulnerabilities. At the end of a successful penetration test, tester will get a valuable information about: What vulnerabilities are hiding in your system How much risk each of them poses to the business How to fix them using filters and other developers techniques Just as the name suggests, in this process, a team of security experts try to penetrate your website, application, or network, through weak points or vulnerabilities. They exploit the vulnerabilities to an agreed extent, and create a report. The pentest report contains the list of vulnerabilities, their risk score, and detailed guidelines for remediation. Penetration testing phases: Phase 1. Pre-engagement Phase 2. Reconnaissance Phase 3. Discovery Phase 4. Vulnerability Analysis Phase 5. Exploitation Phase 6. Pentest Report and Remediation Phase 7. Rescan","title":"Penetration Testing"},{"location":"pages/security-qa/spt_penetration_testing/#security-qa-penetration-testing","text":"Penetration testing is a form of security test where security experts simulate a hack of your systems to uncover and exploit vulnerabilities. At the end of a successful penetration test, tester will get a valuable information about: What vulnerabilities are hiding in your system How much risk each of them poses to the business How to fix them using filters and other developers techniques Just as the name suggests, in this process, a team of security experts try to penetrate your website, application, or network, through weak points or vulnerabilities. They exploit the vulnerabilities to an agreed extent, and create a report. The pentest report contains the list of vulnerabilities, their risk score, and detailed guidelines for remediation. Penetration testing phases: Phase 1. Pre-engagement Phase 2. Reconnaissance Phase 3. Discovery Phase 4. Vulnerability Analysis Phase 5. Exploitation Phase 6. Pentest Report and Remediation Phase 7. Rescan","title":"[Security-QA] Penetration testing"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/","text":"[Security-QA] Privilege Escalation Attacks Privilege escalation happens when a malicious user exploits a bug, design flaw, or configuration error in an application or operating system to gain elevated access to resources that should normally be unavailable to them. The attacker can use the newly obtained privileges to steal confidential data, run administrative commands or deploy malware \u2013 and potentially do serious damage to your operating system, server applications, organization, and reputation. Privilege escalation is a type of network attack used to gain unauthorized access to systems within a security perimeter. Attackers start by finding weak points in an organization\u2019s defenses and gaining access to a system. In many cases that first point of penetration will not grant attackers with the level of access or data they need. They will then attempt privilege escalation to gain more permissions or obtain access to additional, more sensitive systems. Horizontal vs. Vertical Privilege Escalation There are two types of privilege escalation 1. Horizontal privilege escalation An attacker expands their privileges by taking over another account and misusing the legitimate privileges granted to the other user. 2. Vertical privilege escalation An attacker attempts to gain more permissions or access with an existing account they have compromised. For example, an attacker takes over a regular user account on a network and attempts to gain administrative permissions or root access. Why Is It Important to Prevent Privilege Escalation Attacks For attackers, privilege escalation is a means to an end. It allows them to gain access to an environment, persist and deepen their access, and perform more severe malicious activity. For example, privilege escalation can transform a simple malware infection into a catastrophic data breach Privilege escalations allow attackers to open up new attack vectors on a target system. For example, it can involve: Gaining access to other connected systems Deploying additional malicious payloads on a target system Adjusting security settings or privileges Gaining access to applications or data on a system beyond the privileges of the original compromised account In extreme cases, gaining root access to a target system or an entire network When security teams suspect privilege escalation it is important to perform an in-depth investigation. Signs of privilege escalation include malware on sensitive systems, suspicious logins, and unusual network communications. Any privilege escalation incident must be dealt with as a severe security incident and, depending on the organization\u2019s compliance obligations, might have to be reported to authorities. How Do Privilege Escalation Attacks Work Privilege escalation attacks typically involve the exploitation of vulnerabilities such as software bugs, misconfigurations, and incorrect access controls. Every account that interacts with a system has some privileges. Standard users typically have limited access to system databases, sensitive files, or other resources. In some cases, users have excessive access to sensitive resources, and may not even be aware of it, because they do not try to gain access beyond their entitlements. In other cases, attackers can manipulate weaknesses of the system to increase privileges. By taking over a low-level user account and either abusing excessive privileges, or increasing privileges, a malicious attacker has an entry point to a sensitive system. Attackers might dwell in a system for some time, performing reconnaissance and waiting for an opportunity to deepen their access. Eventually, they will find a way to escalate privileges to a higher level than the account that was initially compromised. Depending on their goal, attackers can continue horizontally to take control of additional systems, or escalate privileges vertically, to gain admin and root control, until they have access to the entire full environment. Privilege Escalation Attack Vectors 1. Credential Exploitation Single factor authentication leaves the door wide open to attackers planning on performing privilege escalation. If attackers obtain a privileged user\u2019s account name \u2013 even without the password \u2013 it is a matter of time before they obtain the password. Once they obtain a working password, they can move laterally through the environment undetected. Even if the attacker is detected and the organization resets the password or reimages the affected system, the attacker may have a way to retain a persistent presence \u2013 for example, via a compromised mobile phone or rootkit malware on a device. This makes it important to thoroughly eradicate the threat and continuously monitor for anomalies. Common ways attackers can gain access to credentials Password exposure \u2013 in many cases passwords are available in open site, because employees share them with others, reuse them, or store them in plaintext on their machines. Password guessing \u2013 attackers can use publicly available information about the account owner to make educated guesses about their password. If attackers guess one password, they can often gain access to multiple resources due to password reuse. Shoulder surfing \u2013 attackers can observe the actions of privileged individuals, either in person, via unauthorized access to cameras, or through keyloggers on their devices, and thus gain access to passwords. Dictionary attacks \u2013 the use of lists of common words to automatically combine possible passwords and try to access an account. Attackers can customize the dictionary according to known password length and requirements. Password complexity policies and limiting the number of password retries are effective against these attacks. Rainbow table attacks \u2013 a rainbow table assumes the attacker knows the algorithm used to hash passwords, and converts these hashes into original passwords. These attacks need some seed information to succeed. Brute force password attacks \u2013 attackers typically use these as a last resort. They are only effective against shorter passwords with limited complexity, and where there are no limits on the number of password retries. Password spraying \u2013 this is the opposite of a brute force attack: an automated attempt to gain access to a large number of accounts using a few very common passwords. Pass-the-Hash (PtH) \u2013 this involves using the NT Lan Manager hash of a password instead of the original plaintext password. The hash can be scraped from active memory or obtained by other techniques that exploit weaknesses in the authentication protocol. Security questions \u2013 many password mechanisms rely on security questions in case the user forgets their password. These are questions about the user\u2019s life, many of which are easy to obtain from social media or individuals who know the user, or from the dark web (many security question databases were exposed in previous breaches). Credential stuffing \u2013 attackers use a list of usernames or email addresses and passwords they obtained from previous breaches or the dark web, and try it against accounts in a target system. Because individuals commonly reuse passwords, this technique has high success rates. Password changes and resets \u2013 attackers can easily compromise password reset mechanisms. Whenever a password is reset, there is an implicit risk in the process of transmission and storage of the new password. Attackers can gain access to a password legitimately reset by a user, or request password reset themselves after compromising a device. 2. Vulnerabilities and Exploits Attackers can perform privilege escalation by exploiting vulnerabilities in the design, implementation, or configuration of multiple systems \u2013 including communication protocols, communication transports, operating systems, browsers, web applications, cloud systems, and network infrastructure. The level of risk depends on the nature of the vulnerability and how critical is the system in which the vulnerability is discovered. Only a small fraction of vulnerabilities allow vertical privilege escalation. However, any vulnerability that can allow an attacker to change privileges should be treated with high severity. 3. Misconfigurations Privilege escalation very commonly results from misconfiguration, such as failure to configure authentication for a sensitive system, mistakes in firewall configuration, or open ports. Security misconfigurations - can lead to privilege escalation Cloud storage buckets exposed to the Internet with no authentication. Default passwords used for admin or root accounts (this is common for IoT devices). Insecure defaults for a newly installed system, which are not changed due to negligence or lack of knowledge. Backdoor into the environment which was known to administrators but not documented, and is discovered by an attacker. 4. Malware Attackers can use many types of malware, including trojans, spyware, worms, and ransomware, to gain a hold on an environment and perform privilege escalation. Malware can be deployed by exploiting a vulnerability, can be packaged with legitimate applications, via malicious links or downloads combined with social engineering, or via weaknesses in the supply chain. Malware typically runs as an operating system process, and has the permissions of the user account from which it was executed. So there are two directions for exploitation: Attackers who gain access to a user account can deploy malware at user level, and then find a way to increase their privileges. Attacks who have already escalated privileges can deploy malware at admin or root level, and use it to gain persistent access to an entire environment. Common examples of malware - for privilege escalation Worms \u2013 malware that relies on bugs and vulnerabilities to deliver malicious payloads and propagate to other systems. Worms are a common mechanism for horizontal privilege escalation. Rootkits \u2013 a malicious process running on a target device which grants the attacker complete control over its operating system, enabling vertical privilege escalation. Bad bots \u2013 automated mechanisms that perform malicious actions against target resources. Bots can be used in the reconnaissance phase of a privilege escalation attack, and are also commonly used to spread worms. Trojan \u2013 malware disguised as a normal file or application, which persists on the user\u2019s device, and can deploy other malware or modify system operations. Many authentication based attacks rely on trojans. Ransomware \u2013 ransomware can rapidly spread across networks and serve as a horizontal privilege escalation mechanism. Adware \u2013 malware that loads unwanted advertisements to a user. Interacting with these ads can result in additional malware deployed on the device, serving as a vertical privilege escalation mechanism. Spyware \u2013 spyware performs surveillance on a device, for example by monitoring a user\u2019s activity on the keyboard or granting access to the screen, microphone, or camera. Attackers can use these inputs to steal credentials and compromise user accounts. 5. Social Engineering Social engineering is used in almost all cyber attacks. It relies on manipulating people into violating security procedures and divulging sensitive or personal information. It is a very common technique used by attackers to gain unauthorized access and escalate privileges. Social engineering is highly effective because it circumvents security controls by preying on human weaknesses and emotions. Attackers realize that it is much easier to trick or manipulate a privileged user than break into a well-defended security system. Common types of social engineering attacks - used for privilege escalation Phishing \u2013 an attacker sends a message that appears to be legitimate, with a malicious link or attachment. If the victim clicks the link or executes the attachment, the attacker typically deploys malware and compromises their device. Depending on the type of malware, this may allow the attacker to take over the user\u2019s credentials. Spear phishing \u2013 a sophisticated form of phishing custom-made for a specific privileged user or group of users. Spear phishing can allow attackers to take over highly privileged accounts like those belonging to system administrators, finance employees, or senior executives. Vishing (voice phishing) \u2013 attackers call company employees impersonating an authoritative figure, such as the company\u2019s IT staff, the bank, or law enforcement. Employees can be tricked into providing sensitive information like passwords or access details, or even coerced into installing malware on their device. Scareware \u2013 a malicious software program that tricks victims into thinking their devices are infected, and asks them to download additional software or execute an action, which in reality deploys malware on their machine. Like other techniques, this can be used to compromise a victim\u2019s device and take over their account. Watering hole \u2013 an attacker compromises a website visited by a group of privileged individuals. For example, this could be a certain page on a corporate intranet. Any employee visiting the page may have a malicious script run in their browser, or can be tricked into clicking a malicious link. Pharming \u2013 a fraud scheme in which software deployed on the victim\u2019s device sends them to a fake website, impersonating a trusted institution like a bank or government website. The victim is then tricked into providing personal details, which the attacker can use to take over their account.","title":"Privilege Escalation Attacks"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#security-qa-privilege-escalation-attacks","text":"Privilege escalation happens when a malicious user exploits a bug, design flaw, or configuration error in an application or operating system to gain elevated access to resources that should normally be unavailable to them. The attacker can use the newly obtained privileges to steal confidential data, run administrative commands or deploy malware \u2013 and potentially do serious damage to your operating system, server applications, organization, and reputation. Privilege escalation is a type of network attack used to gain unauthorized access to systems within a security perimeter. Attackers start by finding weak points in an organization\u2019s defenses and gaining access to a system. In many cases that first point of penetration will not grant attackers with the level of access or data they need. They will then attempt privilege escalation to gain more permissions or obtain access to additional, more sensitive systems.","title":"[Security-QA] Privilege Escalation Attacks"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#horizontal-vs-vertical-privilege-escalation","text":"","title":"Horizontal vs. Vertical Privilege Escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#there-are-two-types-of-privilege-escalation","text":"","title":"There are two types of privilege escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#1-horizontal-privilege-escalation","text":"An attacker expands their privileges by taking over another account and misusing the legitimate privileges granted to the other user.","title":"1. Horizontal privilege escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#2-vertical-privilege-escalation","text":"An attacker attempts to gain more permissions or access with an existing account they have compromised. For example, an attacker takes over a regular user account on a network and attempts to gain administrative permissions or root access.","title":"2. Vertical privilege escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#why-is-it-important-to-prevent-privilege-escalation-attacks","text":"For attackers, privilege escalation is a means to an end. It allows them to gain access to an environment, persist and deepen their access, and perform more severe malicious activity. For example, privilege escalation can transform a simple malware infection into a catastrophic data breach Privilege escalations allow attackers to open up new attack vectors on a target system. For example, it can involve: Gaining access to other connected systems Deploying additional malicious payloads on a target system Adjusting security settings or privileges Gaining access to applications or data on a system beyond the privileges of the original compromised account In extreme cases, gaining root access to a target system or an entire network When security teams suspect privilege escalation it is important to perform an in-depth investigation. Signs of privilege escalation include malware on sensitive systems, suspicious logins, and unusual network communications. Any privilege escalation incident must be dealt with as a severe security incident and, depending on the organization\u2019s compliance obligations, might have to be reported to authorities.","title":"Why Is It Important to Prevent Privilege Escalation Attacks"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#how-do-privilege-escalation-attacks-work","text":"Privilege escalation attacks typically involve the exploitation of vulnerabilities such as software bugs, misconfigurations, and incorrect access controls. Every account that interacts with a system has some privileges. Standard users typically have limited access to system databases, sensitive files, or other resources. In some cases, users have excessive access to sensitive resources, and may not even be aware of it, because they do not try to gain access beyond their entitlements. In other cases, attackers can manipulate weaknesses of the system to increase privileges. By taking over a low-level user account and either abusing excessive privileges, or increasing privileges, a malicious attacker has an entry point to a sensitive system. Attackers might dwell in a system for some time, performing reconnaissance and waiting for an opportunity to deepen their access. Eventually, they will find a way to escalate privileges to a higher level than the account that was initially compromised. Depending on their goal, attackers can continue horizontally to take control of additional systems, or escalate privileges vertically, to gain admin and root control, until they have access to the entire full environment.","title":"How Do Privilege Escalation Attacks Work"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#privilege-escalation-attack-vectors","text":"","title":"Privilege Escalation Attack Vectors"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#1-credential-exploitation","text":"Single factor authentication leaves the door wide open to attackers planning on performing privilege escalation. If attackers obtain a privileged user\u2019s account name \u2013 even without the password \u2013 it is a matter of time before they obtain the password. Once they obtain a working password, they can move laterally through the environment undetected. Even if the attacker is detected and the organization resets the password or reimages the affected system, the attacker may have a way to retain a persistent presence \u2013 for example, via a compromised mobile phone or rootkit malware on a device. This makes it important to thoroughly eradicate the threat and continuously monitor for anomalies.","title":"1. Credential Exploitation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#common-ways-attackers-can-gain-access-to-credentials","text":"Password exposure \u2013 in many cases passwords are available in open site, because employees share them with others, reuse them, or store them in plaintext on their machines. Password guessing \u2013 attackers can use publicly available information about the account owner to make educated guesses about their password. If attackers guess one password, they can often gain access to multiple resources due to password reuse. Shoulder surfing \u2013 attackers can observe the actions of privileged individuals, either in person, via unauthorized access to cameras, or through keyloggers on their devices, and thus gain access to passwords. Dictionary attacks \u2013 the use of lists of common words to automatically combine possible passwords and try to access an account. Attackers can customize the dictionary according to known password length and requirements. Password complexity policies and limiting the number of password retries are effective against these attacks. Rainbow table attacks \u2013 a rainbow table assumes the attacker knows the algorithm used to hash passwords, and converts these hashes into original passwords. These attacks need some seed information to succeed. Brute force password attacks \u2013 attackers typically use these as a last resort. They are only effective against shorter passwords with limited complexity, and where there are no limits on the number of password retries. Password spraying \u2013 this is the opposite of a brute force attack: an automated attempt to gain access to a large number of accounts using a few very common passwords. Pass-the-Hash (PtH) \u2013 this involves using the NT Lan Manager hash of a password instead of the original plaintext password. The hash can be scraped from active memory or obtained by other techniques that exploit weaknesses in the authentication protocol. Security questions \u2013 many password mechanisms rely on security questions in case the user forgets their password. These are questions about the user\u2019s life, many of which are easy to obtain from social media or individuals who know the user, or from the dark web (many security question databases were exposed in previous breaches). Credential stuffing \u2013 attackers use a list of usernames or email addresses and passwords they obtained from previous breaches or the dark web, and try it against accounts in a target system. Because individuals commonly reuse passwords, this technique has high success rates. Password changes and resets \u2013 attackers can easily compromise password reset mechanisms. Whenever a password is reset, there is an implicit risk in the process of transmission and storage of the new password. Attackers can gain access to a password legitimately reset by a user, or request password reset themselves after compromising a device.","title":"Common ways attackers can gain access to credentials"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#2-vulnerabilities-and-exploits","text":"Attackers can perform privilege escalation by exploiting vulnerabilities in the design, implementation, or configuration of multiple systems \u2013 including communication protocols, communication transports, operating systems, browsers, web applications, cloud systems, and network infrastructure. The level of risk depends on the nature of the vulnerability and how critical is the system in which the vulnerability is discovered. Only a small fraction of vulnerabilities allow vertical privilege escalation. However, any vulnerability that can allow an attacker to change privileges should be treated with high severity.","title":"2. Vulnerabilities and Exploits"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#3-misconfigurations","text":"Privilege escalation very commonly results from misconfiguration, such as failure to configure authentication for a sensitive system, mistakes in firewall configuration, or open ports.","title":"3. Misconfigurations"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#security-misconfigurations-can-lead-to-privilege-escalation","text":"Cloud storage buckets exposed to the Internet with no authentication. Default passwords used for admin or root accounts (this is common for IoT devices). Insecure defaults for a newly installed system, which are not changed due to negligence or lack of knowledge. Backdoor into the environment which was known to administrators but not documented, and is discovered by an attacker.","title":"Security misconfigurations - can lead to privilege escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#4-malware","text":"Attackers can use many types of malware, including trojans, spyware, worms, and ransomware, to gain a hold on an environment and perform privilege escalation. Malware can be deployed by exploiting a vulnerability, can be packaged with legitimate applications, via malicious links or downloads combined with social engineering, or via weaknesses in the supply chain. Malware typically runs as an operating system process, and has the permissions of the user account from which it was executed. So there are two directions for exploitation: Attackers who gain access to a user account can deploy malware at user level, and then find a way to increase their privileges. Attacks who have already escalated privileges can deploy malware at admin or root level, and use it to gain persistent access to an entire environment.","title":"4. Malware"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#common-examples-of-malware-for-privilege-escalation","text":"Worms \u2013 malware that relies on bugs and vulnerabilities to deliver malicious payloads and propagate to other systems. Worms are a common mechanism for horizontal privilege escalation. Rootkits \u2013 a malicious process running on a target device which grants the attacker complete control over its operating system, enabling vertical privilege escalation. Bad bots \u2013 automated mechanisms that perform malicious actions against target resources. Bots can be used in the reconnaissance phase of a privilege escalation attack, and are also commonly used to spread worms. Trojan \u2013 malware disguised as a normal file or application, which persists on the user\u2019s device, and can deploy other malware or modify system operations. Many authentication based attacks rely on trojans. Ransomware \u2013 ransomware can rapidly spread across networks and serve as a horizontal privilege escalation mechanism. Adware \u2013 malware that loads unwanted advertisements to a user. Interacting with these ads can result in additional malware deployed on the device, serving as a vertical privilege escalation mechanism. Spyware \u2013 spyware performs surveillance on a device, for example by monitoring a user\u2019s activity on the keyboard or granting access to the screen, microphone, or camera. Attackers can use these inputs to steal credentials and compromise user accounts.","title":"Common examples of malware - for privilege escalation"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#5-social-engineering","text":"Social engineering is used in almost all cyber attacks. It relies on manipulating people into violating security procedures and divulging sensitive or personal information. It is a very common technique used by attackers to gain unauthorized access and escalate privileges. Social engineering is highly effective because it circumvents security controls by preying on human weaknesses and emotions. Attackers realize that it is much easier to trick or manipulate a privileged user than break into a well-defended security system.","title":"5. Social Engineering"},{"location":"pages/security-qa/spt_privilege_escalation_attacks/#common-types-of-social-engineering-attacks-used-for-privilege-escalation","text":"Phishing \u2013 an attacker sends a message that appears to be legitimate, with a malicious link or attachment. If the victim clicks the link or executes the attachment, the attacker typically deploys malware and compromises their device. Depending on the type of malware, this may allow the attacker to take over the user\u2019s credentials. Spear phishing \u2013 a sophisticated form of phishing custom-made for a specific privileged user or group of users. Spear phishing can allow attackers to take over highly privileged accounts like those belonging to system administrators, finance employees, or senior executives. Vishing (voice phishing) \u2013 attackers call company employees impersonating an authoritative figure, such as the company\u2019s IT staff, the bank, or law enforcement. Employees can be tricked into providing sensitive information like passwords or access details, or even coerced into installing malware on their device. Scareware \u2013 a malicious software program that tricks victims into thinking their devices are infected, and asks them to download additional software or execute an action, which in reality deploys malware on their machine. Like other techniques, this can be used to compromise a victim\u2019s device and take over their account. Watering hole \u2013 an attacker compromises a website visited by a group of privileged individuals. For example, this could be a certain page on a corporate intranet. Any employee visiting the page may have a malicious script run in their browser, or can be tricked into clicking a malicious link. Pharming \u2013 a fraud scheme in which software deployed on the victim\u2019s device sends them to a fake website, impersonating a trusted institution like a bank or government website. The victim is then tricked into providing personal details, which the attacker can use to take over their account.","title":"Common types of social engineering attacks - used for privilege escalation"},{"location":"pages/security-qa/spt_security_testing/","text":"[Security-QA] Security Testing Security Testing is the process of scanning your network as well as physical environment for vulnerabilities that could lead to a cyberattack, data theft, or other malicious activity. It is a broad term encompassing a number of different techniques. Security Testing Approaches Black Box Security Tessting In black box testing, the security tester evaluates a system\u2019s security from the outside without knowing the internal processes generating responses. A black box is an opaque system, meaning that only the inputs and outputs are observable. In some cases, the tester ignores the system\u2019s internal structure even if it is possible to understand it. Black box testing ensures a separation between the tester and code creator. It forces the tester to adopt an outsider\u2019s perspective to test the software as an attacker might approach it. The social and technical separation between the test and the software development process enables the tester to challenge the creator \u2013 for example, by manipulating the application in a way the developer didn\u2019t consider. White Box Security Tessting In white box testing, the tester designs test cases and tests based on the software\u2019s source code. The tester knows and understands the code structure instead of black box testing or gray box testing (where the tester has limited knowledge of the code structure). It is also known as clear, transparent, or glass box testing due to this observability. The white box testing technique focuses on an application\u2019s internal workings and software components to test its design and structure from the inside. Testing teams can apply this technique for system, integration, and unit tests. Grey Box Security Tessting Gray box testing is a hybrid of white box and black box testing \u2013 black box testing involves a test object with an unknown internal structure; white box testing requires the application\u2019s internal structure to be fully known. In gray box testing, the tester has a partial view of the internal structure and workings of the system. Testers can base their tests on a limited understanding of the application\u2019s underlying architecture and code. The test object is thus semi-transparent or \u201cgray.\u201d This approach combines white box and black box testing techniques to extract the best out of both. Gray box testers merge the code targeting of a white box test with the diverse, innovative approaches of a black box test, such as functional and regression testing. Testers can simultaneously assess the software\u2019s user surface and internal workings. Bug Bounty is based on finding vulnerabilities in certain software. https://www.bugbountyhunter.com/methodology/zseanos-methodology.pdf","title":"Security Testing"},{"location":"pages/security-qa/spt_security_testing/#security-qa-security-testing","text":"Security Testing is the process of scanning your network as well as physical environment for vulnerabilities that could lead to a cyberattack, data theft, or other malicious activity. It is a broad term encompassing a number of different techniques. Security Testing Approaches Black Box Security Tessting In black box testing, the security tester evaluates a system\u2019s security from the outside without knowing the internal processes generating responses. A black box is an opaque system, meaning that only the inputs and outputs are observable. In some cases, the tester ignores the system\u2019s internal structure even if it is possible to understand it. Black box testing ensures a separation between the tester and code creator. It forces the tester to adopt an outsider\u2019s perspective to test the software as an attacker might approach it. The social and technical separation between the test and the software development process enables the tester to challenge the creator \u2013 for example, by manipulating the application in a way the developer didn\u2019t consider. White Box Security Tessting In white box testing, the tester designs test cases and tests based on the software\u2019s source code. The tester knows and understands the code structure instead of black box testing or gray box testing (where the tester has limited knowledge of the code structure). It is also known as clear, transparent, or glass box testing due to this observability. The white box testing technique focuses on an application\u2019s internal workings and software components to test its design and structure from the inside. Testing teams can apply this technique for system, integration, and unit tests. Grey Box Security Tessting Gray box testing is a hybrid of white box and black box testing \u2013 black box testing involves a test object with an unknown internal structure; white box testing requires the application\u2019s internal structure to be fully known. In gray box testing, the tester has a partial view of the internal structure and workings of the system. Testers can base their tests on a limited understanding of the application\u2019s underlying architecture and code. The test object is thus semi-transparent or \u201cgray.\u201d This approach combines white box and black box testing techniques to extract the best out of both. Gray box testers merge the code targeting of a white box test with the diverse, innovative approaches of a black box test, such as functional and regression testing. Testers can simultaneously assess the software\u2019s user surface and internal workings. Bug Bounty is based on finding vulnerabilities in certain software. https://www.bugbountyhunter.com/methodology/zseanos-methodology.pdf","title":"[Security-QA] Security Testing"},{"location":"pages/security-qa/spt_sql_injection/","text":"[Security-QA] SQL Injection SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior What is the impact of a successful SQL injection attack A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information. SQL injection examples There are a wide variety of SQL injection vulnerabilities, attacks, and techniques, which arise in different situations. Some common SQL injection examples include: Retrieving hidden data, where you can modify an SQL query to return additional results. Subverting application logic, where you can change a query to interfere with the application's logic. UNION attacks, where you can retrieve data from different database tables. Examining the database, where you can extract information about the version and structure of the database. Blind SQL injection, where the results of a query you control are not returned in the application's responses. Retrieving hidden data Consider a shopping application that displays products in different categories. When the user clicks on the Gifts category, their browser requests the URL: https://insecure-website.com/products?category=Gifts This causes the application to make an SQL query to retrieve details of the relevant products from the database: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 This SQL query asks the database to return: all details (*) from the products table where the category is Gifts and released is 1. The restriction released = 1 is being used to hide products that are not released. For unreleased products, presumably released = 0. The application doesn't implement any defenses against SQL injection attacks, so an attacker can construct an attack like: https://insecure-website.com/products?category=Gifts'-- This results in the SQL query: SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1 The key thing here is that the double-dash sequence -- is a comment indicator in SQL, and means that the rest of the query is interpreted as a comment. This effectively removes the remainder of the query, so it no longer includes AND released = 1. This means that all products are displayed, including unreleased products. Going further, an attacker can cause the application to display all the products in any category, including categories that they don't know about: https://insecure-website.com/products?category=Gifts'+OR+1=1-- This results in the SQL query: SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1 The modified query will return all items where either the category is Gifts, or 1 is equal to 1. Since 1=1 is always true, the query will return all items. Subverting application logic Consider an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, the application checks the credentials by performing the following SQL query: SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese' If the query returns the details of a user, then the login is successful. Otherwise, it is rejected. Here, an attacker can log in as any user without a password simply by using the SQL comment sequence -- to remove the password check from the WHERE clause of the query. For example, submitting the username administrator'-- and a blank password results in the following query: SELECT * FROM users WHERE username = 'administrator'--' AND password = '' This query returns the user whose username is administrator and successfully logs the attacker in as that user. Retrieving data from other database tables In cases where the results of an SQL query are returned within the application's responses, an attacker can leverage an SQL injection vulnerability to retrieve data from other tables within the database. This is done using the UNION keyword, which lets you execute an additional SELECT query and append the results to the original query. For example, if an application executes the following query containing the user input \"Gifts\": SELECT name, description FROM products WHERE category = 'Gifts' then an attacker can submit the input: ' UNION SELECT username, password FROM users-- This will cause the application to return all usernames and passwords along with the names and descriptions of products. Examining the database Following initial identification of an SQL injection vulnerability, it is generally useful to obtain some information about the database itself. This information can often pave the way for further exploitation. You can query the version details for the database. The way that this is done depends on the database type, so you can infer the database type from whichever technique works. For example, on Oracle you can execute: SELECT * FROM v$version You can also determine what database tables exist, and which columns they contain. For example, on most databases you can execute the following query to list the tables: SELECT * FROM information_schema.tables Blind SQL injection vulnerabilities Many instances of SQL injection are blind vulnerabilities. This means that the application does not return the results of the SQL query or the details of any database errors within its responses. Blind vulnerabilities can still be exploited to access unauthorized data, but the techniques involved are generally more complicated and difficult to perform. Depending on the nature of the vulnerability and the database involved, the following techniques can be used to exploit blind SQL injection vulnerabilities: You can change the logic of the query to trigger a detectable difference in the application's response depending on the truth of a single condition. This might involve injecting a new condition into some Boolean logic, or conditionally triggering an error such as a divide-by-zero. You can conditionally trigger a time delay in the processing of the query, allowing you to infer the truth of the condition based on the time that the application takes to respond. You can trigger an out-of-band network interaction, using OAST techniques. This technique is extremely powerful and works in situations where the other techniques do not. Often, you can directly exfiltrate data via the out-of-band channel, for example by placing the data into a DNS lookup for a domain that you control.","title":"SQL Injection"},{"location":"pages/security-qa/spt_sql_injection/#security-qa-sql-injection","text":"SQL injection is a web security vulnerability that allows an attacker to interfere with the queries that an application makes to its database. It generally allows an attacker to view data that they are not normally able to retrieve. This might include data belonging to other users, or any other data that the application itself is able to access. In many cases, an attacker can modify or delete this data, causing persistent changes to the application's content or behavior","title":"[Security-QA] SQL Injection"},{"location":"pages/security-qa/spt_sql_injection/#what-is-the-impact-of-a-successful-sql-injection-attack","text":"A successful SQL injection attack can result in unauthorized access to sensitive data, such as passwords, credit card details, or personal user information.","title":"What is the impact of a successful SQL injection attack"},{"location":"pages/security-qa/spt_sql_injection/#sql-injection-examples","text":"There are a wide variety of SQL injection vulnerabilities, attacks, and techniques, which arise in different situations. Some common SQL injection examples include: Retrieving hidden data, where you can modify an SQL query to return additional results. Subverting application logic, where you can change a query to interfere with the application's logic. UNION attacks, where you can retrieve data from different database tables. Examining the database, where you can extract information about the version and structure of the database. Blind SQL injection, where the results of a query you control are not returned in the application's responses.","title":"SQL injection examples"},{"location":"pages/security-qa/spt_sql_injection/#retrieving-hidden-data","text":"Consider a shopping application that displays products in different categories. When the user clicks on the Gifts category, their browser requests the URL: https://insecure-website.com/products?category=Gifts This causes the application to make an SQL query to retrieve details of the relevant products from the database: SELECT * FROM products WHERE category = 'Gifts' AND released = 1 This SQL query asks the database to return: all details (*) from the products table where the category is Gifts and released is 1. The restriction released = 1 is being used to hide products that are not released. For unreleased products, presumably released = 0. The application doesn't implement any defenses against SQL injection attacks, so an attacker can construct an attack like: https://insecure-website.com/products?category=Gifts'-- This results in the SQL query: SELECT * FROM products WHERE category = 'Gifts'--' AND released = 1 The key thing here is that the double-dash sequence -- is a comment indicator in SQL, and means that the rest of the query is interpreted as a comment. This effectively removes the remainder of the query, so it no longer includes AND released = 1. This means that all products are displayed, including unreleased products. Going further, an attacker can cause the application to display all the products in any category, including categories that they don't know about: https://insecure-website.com/products?category=Gifts'+OR+1=1-- This results in the SQL query: SELECT * FROM products WHERE category = 'Gifts' OR 1=1--' AND released = 1 The modified query will return all items where either the category is Gifts, or 1 is equal to 1. Since 1=1 is always true, the query will return all items.","title":"Retrieving hidden data"},{"location":"pages/security-qa/spt_sql_injection/#subverting-application-logic","text":"Consider an application that lets users log in with a username and password. If a user submits the username wiener and the password bluecheese, the application checks the credentials by performing the following SQL query: SELECT * FROM users WHERE username = 'wiener' AND password = 'bluecheese' If the query returns the details of a user, then the login is successful. Otherwise, it is rejected. Here, an attacker can log in as any user without a password simply by using the SQL comment sequence -- to remove the password check from the WHERE clause of the query. For example, submitting the username administrator'-- and a blank password results in the following query: SELECT * FROM users WHERE username = 'administrator'--' AND password = '' This query returns the user whose username is administrator and successfully logs the attacker in as that user.","title":"Subverting application logic"},{"location":"pages/security-qa/spt_sql_injection/#retrieving-data-from-other-database-tables","text":"In cases where the results of an SQL query are returned within the application's responses, an attacker can leverage an SQL injection vulnerability to retrieve data from other tables within the database. This is done using the UNION keyword, which lets you execute an additional SELECT query and append the results to the original query. For example, if an application executes the following query containing the user input \"Gifts\": SELECT name, description FROM products WHERE category = 'Gifts' then an attacker can submit the input: ' UNION SELECT username, password FROM users-- This will cause the application to return all usernames and passwords along with the names and descriptions of products.","title":"Retrieving data from other database tables"},{"location":"pages/security-qa/spt_sql_injection/#examining-the-database","text":"Following initial identification of an SQL injection vulnerability, it is generally useful to obtain some information about the database itself. This information can often pave the way for further exploitation. You can query the version details for the database. The way that this is done depends on the database type, so you can infer the database type from whichever technique works. For example, on Oracle you can execute: SELECT * FROM v$version You can also determine what database tables exist, and which columns they contain. For example, on most databases you can execute the following query to list the tables: SELECT * FROM information_schema.tables","title":"Examining the database"},{"location":"pages/security-qa/spt_sql_injection/#blind-sql-injection-vulnerabilities","text":"Many instances of SQL injection are blind vulnerabilities. This means that the application does not return the results of the SQL query or the details of any database errors within its responses. Blind vulnerabilities can still be exploited to access unauthorized data, but the techniques involved are generally more complicated and difficult to perform. Depending on the nature of the vulnerability and the database involved, the following techniques can be used to exploit blind SQL injection vulnerabilities: You can change the logic of the query to trigger a detectable difference in the application's response depending on the truth of a single condition. This might involve injecting a new condition into some Boolean logic, or conditionally triggering an error such as a divide-by-zero. You can conditionally trigger a time delay in the processing of the query, allowing you to infer the truth of the condition based on the time that the application takes to respond. You can trigger an out-of-band network interaction, using OAST techniques. This technique is extremely powerful and works in situations where the other techniques do not. Often, you can directly exfiltrate data via the out-of-band channel, for example by placing the data into a DNS lookup for a domain that you control.","title":"Blind SQL injection vulnerabilities"}]}